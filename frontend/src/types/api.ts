// Auto-generated TypeScript types from OpenAPI specification
// Do not edit this file manually - run 'task generate-types' instead

export interface WordOfDayEmailPreferenceRequest {
  enabled: boolean;
}

export interface CreateConversationRequest {
  title: string;
}

export interface UpdateConversationRequest {
  title: string;
}

export interface CreateMessageRequest {
  role: 'user' | 'assistant';
  content:   text?: string;;
  question_id?: number;
}

export interface Conversation {
  id: string;
  user_id: number;
  title: string;
  created_at: string;
  updated_at: string;
  message_count?: number;
  messages?: Array<ChatMessage>;
}

export interface ChatMessage {
  id: string;
  conversation_id: string;
  question_id?: number;
  role: 'user' | 'assistant';
  content:   text?: string;;
  bookmarked?: boolean;
  created_at: string;
  updated_at: string;
  conversation_title?: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  success?: boolean;
  message?: string;
  user?: User;
  redirect_uri?: string;
}

export interface AuthStatusResponse {
  authenticated: boolean;
  user: User | null;
}

export interface User {
  id?: number;
  username?: string;
  email?: string | null;
  timezone?: string | null;
  preferred_language?: string | null;
  current_level?: string | null;
  ai_provider?: string | null;
  ai_model?: string | null;
  ai_enabled?: boolean | null;
  is_paused?: boolean;
  has_api_key?: boolean;
  created_at?: string;
  last_active?: string | null;
  roles?: Array<Role>;
}

export interface Question {
  id?: number;
  language?: Language;
  level?: Level;
  type?: QuestionType;
  status?: QuestionStatus;
  difficulty_score?: number;
  explanation?: string;
  content?: QuestionContent;
  created_at?: string;
  correct_count?: number;
  incorrect_count?: number;
  total_responses?: number;
  user_count?: number;
  correct_answer?: number;
  reporters?: string;
  topic_category?: string;
  grammar_focus?: string;
  vocabulary_domain?: string;
  scenario?: string;
  style_modifier?: string;
  difficulty_modifier?: string;
  time_context?: string;
  confidence_level?: number;
}

export interface QuestionContent {
  question: string;
  options: Array<string>;
  sentence?: string;
  passage?: string;
  hint?: string;
}

export interface AnswerRequest {
  question_id: number;
  user_answer_index: number;
  response_time_ms?: number;
}

export interface AnswerResponse {
  is_correct?: boolean;
  user_answer?: string;
  user_answer_index?: number;
  explanation?: string;
  next_difficulty?: string;
  correct_answer_index?: number;
}

export interface UserProgress {
  current_level?: Level;
  suggested_level?: Level;
  accuracy_rate?: number;
  total_questions?: number;
  correct_answers?: number;
  performance_by_topic?: Record<string, PerformanceMetrics>;
  weak_areas?: Array<string>;
  recent_activity?: Array<UserResponse>;
  worker_status?: WorkerStatus;
  learning_preferences?: UserLearningPreferences;
  priority_insights?: PriorityInsights;
  generation_focus?: GenerationFocus;
  high_priority_topics?: Array<string>;
  gap_analysis?: Record<string, any>;
  priority_distribution?: Record<string, number>;
}

export interface PerformanceMetrics {
  correct_attempts?: number;
  total_attempts?: number;
  average_response_time_ms?: number;
  last_updated?: string;
}

export interface UserResponse {
  question_id?: number;
  is_correct?: boolean;
  created_at?: string;
}

export interface UserUsageStats {
  id?: number;
  user_id?: number;
  api_key_id?: number;
  usage_date?: string;
  usage_hour?: number;
  service_name?: string;
  provider?: string;
  model?: string;
  usage_type?: string;
  prompt_tokens?: number;
  completion_tokens?: number;
  total_tokens?: number;
  requests_made?: number;
  created_at?: string;
  updated_at?: string;
}

export interface UserUsageStatsDaily {
  usage_date?: string;
  service_name?: string;
  provider?: string;
  model?: string;
  usage_type?: string;
  total_prompt_tokens?: number;
  total_completion_tokens?: number;
  total_tokens?: number;
  total_requests?: number;
}

export interface UserUsageStatsHourly {
  usage_hour?: number;
  service_name?: string;
  provider?: string;
  model?: string;
  usage_type?: string;
  total_prompt_tokens?: number;
  total_completion_tokens?: number;
  total_tokens?: number;
  total_requests?: number;
}

export interface UserSettings {
  language?: Language;
  level?: Level;
  ai_provider?: string;
  ai_model?: string;
  ai_enabled?: boolean;
  api_key?: string;
}

export interface TestAIRequest {
  provider: string;
  model: string;
  api_key?: string | null;
}

export interface SuccessResponse {
  success: boolean;
  message?: string;
}

export interface DailyQuestionWithDetails {
  id: number;
  user_id: number;
  question_id: number;
  assignment_date: string;
  is_completed: boolean;
  completed_at?: string | null;
  created_at: string;
  user_answer_index?: number | null;
  submitted_at?: string | null;
  user_shown_count?: number;
  user_total_responses?: number;
  user_correct_count?: number;
  user_incorrect_count?: number;
  question: Question;
}

export interface DailyProgress {
  date: string;
  completed: number;
  total: number;
}

export interface WordOfTheDayDisplay {
  date: string;
  word: string;
  translation: string;
  sentence: string;
  source_type: 'vocabulary_question' | 'snippet';
  source_id: number;
  language: string;
  level?: string | null;
  context?: string | null;
  explanation?: string | null;
  topic_category?: string | null;
}

export interface ErrorResponse {
  code?: string;
  message?: string;
  error?: string;
  details?: string;
  retryable?: boolean;
  severity?: 'info' | 'warn' | 'error' | 'fatal';
}

export interface SignupStatusResponse {
  signups_disabled: boolean;
}

export interface ReportQuestionRequest {
  report_reason?: string;
}

export interface MarkQuestionKnownRequest {
  confidence_level?: number;
}

export interface FeedbackSubmissionRequest {
  feedback_text: string;
  feedback_type?: 'bug' | 'feature_request' | 'general' | 'improvement';
  context_data?: Record<string, any>;
  screenshot_data?: string;
}

export interface FeedbackReport {
  id: number;
  user_id: number;
  feedback_text: string;
  feedback_type: 'bug' | 'feature_request' | 'general' | 'improvement';
  context_data?: Record<string, any>;
  screenshot_data?: string | null;
  screenshot_url?: string | null;
  status: 'new' | 'in_progress' | 'resolved' | 'dismissed';
  admin_notes?: string | null;
  assigned_to_user_id?: number | null;
  resolved_at?: string | null;
  resolved_by_user_id?: number | null;
  created_at: string;
  updated_at: string;
}

export interface FeedbackListResponse {
  items: Array<FeedbackReport>;
  total: number;
  page: number;
  page_size: number;
}

export interface FeedbackUpdateRequest {
  status?: 'new' | 'in_progress' | 'resolved' | 'dismissed';
  admin_notes?: string;
  assigned_to_user_id?: number;
  resolved_at?: string;
  resolved_by_user_id?: number;
}

export interface GeneratingResponse {
  status?: string;
  message?: string;
  ai_model?: string;
  api_key?: string;
}

export interface AIProviders {
  providers?: Array<  name?: string;
  code?: string;
  url?: string;
  usage_supported?: boolean;
  models?: Array<  name?: string;
  code?: string;>;>;
  levels?: Array<string>;
}

export type QuestionType = 'vocabulary' | 'fill_blank' | 'reading_comprehension' | 'qa';

export type QuestionStatus = 'active' | 'reported';

export interface QuizChatRequest {
  user_message: string;
  question: Question;
  answer_context?: AnswerResponse;
  conversation_history?: Array<ChatMessage>;
}

export interface QuizChatResponse {
  ai_response?: string;
}

export interface UserProfile {
  id?: number;
  username?: string;
  email?: string | null;
  timezone?: string | null;
  last_active?: string | null;
  preferred_language?: string | null;
  current_level?: string;
  ai_enabled?: boolean | null;
  is_paused?: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface UserCreateRequest {
  username: string;
  email?: string;
  timezone?: string;
  password: string;
  preferred_language?: string;
  current_level?: string;
  ai_enabled?: boolean;
}

export interface UserUpdateRequest {
  username?: string;
  email?: string;
  timezone?: string;
  preferred_language?: string;
  current_level?: string;
  ai_enabled?: boolean;
  ai_provider?: string;
  ai_model?: string;
  api_key?: string;
  selectedRoles?: Array<string>;
}

export interface PasswordResetRequest {
  new_password: string;
}

export interface ServiceVersion {
  service: string;
  version: string;
  commit: string;
  buildTime: string;
}

export interface AggregatedVersion {
  backend: ServiceVersion;
  worker: any;
}

export interface Role {
  id: number;
  name: string;
  description: string;
  created_at: string;
  updated_at: string;
}

export interface UserLearningPreferences {
  focus_on_weak_areas: boolean;
  fresh_question_ratio: number;
  known_question_penalty: number;
  review_interval_days: number;
  weak_area_boost: number;
  daily_reminder_enabled: boolean;
  tts_voice?: string;
  daily_goal?: number;
}

export interface DashboardUser {
  user?: UserProfile;
  progress?: UserProgress;
  question_stats?: UserQuestionStats;
}

export interface DashboardResponse {
  users?: Array<DashboardUser>;
  question_stats?: QuestionStats;
  ai_concurrency_stats?: AIConcurrencyStats;
  worker_health?: WorkerHealth;
  worker_port?: string;
  worker_base_url?: string;
}

export interface AIConcurrencyStats {
  active_requests?: number;
  max_concurrent?: number;
  queued_requests?: number;
  total_requests?: number;
  user_active_count?: Record<string, number>;
  max_per_user?: number;
}

export interface WorkerHealth {
  global_paused?: boolean;
  healthy_count?: number;
  total_count?: number;
  worker_instances?: Array<  healthy?: boolean;
  is_paused?: boolean;
  is_running?: boolean;
  last_heartbeat?:   Time?: string;
  Valid?: boolean;;
  total_questions_generated?: number;
  total_runs?: number;
  worker_instance?: string;>;
}

export interface PriorityAnalytics {
  distribution?:   high?: number;
  medium?: number;
  low?: number;
  average?: number;;
}

export interface UserPerformanceAnalytics {
  weakAreas?: Array<Record<string, any>>;
  learningPreferences?: Record<string, any>;
}

export interface GenerationIntelligence {
  gapAnalysis?: Array<Record<string, any>>;
  generationSuggestions?: Array<Record<string, any>>;
}

export interface SystemHealthAnalytics {
  performance?: Record<string, any>;
  backgroundJobs?: Record<string, any>;
}

export interface UserQuestionStats {
  user_id?: number;
  total_answered?: number;
  answered_by_type?: Record<string, number>;
  answered_by_level?: Record<string, number>;
  accuracy_by_type?: Record<string, number>;
  accuracy_by_level?: Record<string, number>;
  available_by_type?: Record<string, number>;
  available_by_level?: Record<string, number>;
}

export interface QuestionStats {
  total_questions?: number;
  total_responses?: number;
  questions_by_type?: Record<string, number>;
  questions_by_level?: Record<string, number>;
  questions_by_language?: Record<string, number>;
}

export interface NotificationStats {
  total_sent?: number;
  total_failed?: number;
  success_rate?: number;
  sent_today?: number;
  sent_this_week?: number;
  notifications_by_type?: Record<string, number>;
}

export interface NotificationErrorStats {
  total_errors?: number;
  unresolved_errors?: number;
  errors_by_type?: Record<string, number>;
  errors_by_notification_type?: Record<string, number>;
}

export interface NotificationError {
  id?: number;
  user_id?: number | null;
  username?: string;
  notification_type?: 'daily_reminder' | 'test_email';
  error_type?: 'smtp_error' | 'template_error' | 'user_not_found' | 'email_disabled' | 'other';
  error_message?: string;
  email_address?: string | null;
  occurred_at?: string;
  resolved_at?: string | null;
  resolution_notes?: string | null;
}

export interface UpcomingNotification {
  id?: number;
  user_id?: number;
  username?: string;
  email_address?: string;
  notification_type?: 'daily_reminder' | 'test_email';
  scheduled_for?: string;
  status?: 'pending' | 'sent' | 'cancelled';
  created_at?: string;
}

export interface SentNotification {
  id?: number;
  user_id?: number;
  username?: string;
  email_address?: string;
  notification_type?: 'daily_reminder' | 'test_email';
  subject?: string;
  template_name?: string;
  sent_at?: string;
  status?: 'sent' | 'failed' | 'bounced';
  error_message?: string | null;
  retry_count?: number;
}

export interface PaginationInfo {
  page: number;
  page_size: number;
  total: number;
  total_pages: number;
}

export interface WorkerStatus {
  status?: 'idle' | 'busy' | 'error';
  last_heartbeat?: string;
  error_message?: string | null;
}

export interface WorkerStatusResponse {
  has_errors: boolean;
  error_message: string;
  global_paused: boolean;
  user_paused: boolean;
  healthy_workers: number;
  total_workers: number;
  last_error_details: string;
  worker_running: boolean;
}

export interface LevelsResponse {
  levels: Array<string>;
  level_descriptions: Record<string, string>;
}

export interface LanguageInfo {
  code: string;
  name: string;
  tts_locale?: string;
  tts_voice?: string;
}

export interface APIKeyAvailabilityResponse {
  has_api_key: boolean;
}

export interface CreateAPIKeyRequest {
  key_name: string;
  permission_level: 'readonly' | 'full';
}

export interface CreateAPIKeyResponse {
  id?: number;
  key_name?: string;
  key?: string;
  key_prefix?: string;
  permission_level?: 'readonly' | 'full';
  created_at?: string;
  message?: string;
}

export interface APIKeySummary {
  id?: number;
  key_name?: string;
  key_prefix?: string;
  permission_level?: 'readonly' | 'full';
  last_used_at?: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface APIKeysListResponse {
  api_keys?: Array<APIKeySummary>;
  count?: number;
}

export interface DeleteAPIKeyResponse {
  success?: boolean;
  message?: string;
}

export interface GoogleOAuthLoginResponse {
  auth_url: string;
}

export interface PriorityInsights {
  total_questions_in_queue?: number;
  high_priority_questions?: number;
  medium_priority_questions?: number;
  low_priority_questions?: number;
}

export interface GenerationFocus {
  current_generation_model?: string;
  last_generation_time?: string;
  generation_rate?: number;
}

export interface UserNullable {
  id?: number;
  username?: string;
  email?: string | null;
  timezone?: string | null;
  preferred_language?: string | null;
  current_level?: string | null;
  ai_provider?: string | null;
  ai_model?: string | null;
  ai_enabled?: boolean | null;
  is_paused?: boolean;
  has_api_key?: boolean;
  created_at?: string;
  last_active?: string | null;
  roles?: Array<Role>;
}

export interface ForceSendNotificationResponse {
  message?: string;
  user?:   id?: number;
  username?: string;
  email?: string;;
  notification?:   type?: string;
  subject?: string;
  status?: string;;
}

export interface TTSRequest {
  input: string;
  voice?: string;
  model?: string;
  stream_format?: 'sse' | 'mp3' | 'wav';
}

export interface TTSResponse {
  type?: 'audio' | 'usage' | 'error';
  audio?: string;
  usage?:   input_tokens?: number;
  output_tokens?: number;
  total_tokens?: number;;
  error?: string;
}

export interface TranslateRequest {
  text: string;
  target_language: string;
  source_language?: string;
}

export interface TranslateResponse {
  translated_text: string;
  source_language: string;
  target_language: string;
  confidence?: number;
}

export interface DailyQuestionHistory {
  assignment_date: string;
  is_completed: boolean;
  is_correct?: boolean | null;
  submitted_at?: string | null;
}

export type StoryStatus = 'active' | 'archived' | 'completed';

export interface Story {
  id?: number;
  user_id?: number;
  title?: string;
  language?: string;
  subject?: string | null;
  author_style?: string | null;
  time_period?: string | null;
  genre?: string | null;
  tone?: string | null;
  character_names?: string | null;
  custom_instructions?: string | null;
  section_length_override?: 'short' | 'medium' | 'long';
  status?: 'active' | 'archived' | 'completed';
  auto_generation_paused?: boolean;
  last_section_generated_at?: string | null;
  created_at?: string;
  updated_at?: string;
  extra_generations_today?: number;
}

export interface StorySection {
  id?: number;
  story_id?: number;
  section_number?: number;
  content?: string;
  language_level?: string;
  word_count?: number;
  generated_at?: string;
  generation_date?: string;
}

export interface StorySectionQuestion {
  id?: number;
  section_id?: number;
  question_text?: string;
  options?: Array<string>;
  correct_answer_index?: number;
  explanation?: string | null;
  created_at?: string;
}

export interface StoryWithSections {}

export interface StorySectionWithQuestions {}

export interface ToggleAutoGenerationRequest {
  paused: boolean;
}

export interface ToggleAutoGenerationResponse {
  message?: string;
  auto_generation_paused?: boolean;
}

export interface CreateStoryRequest {
  title: string;
  subject?: string | null;
  author_style?: string | null;
  time_period?: string | null;
  genre?: string | null;
  tone?: string | null;
  character_names?: string | null;
  custom_instructions?: string | null;
  section_length_override?: 'short' | 'medium' | 'long';
}

export interface EmptyRequest {}

export interface UserIdRequest {
  user_id: number;
}

export interface CreateSnippetRequest {
  original_text: string;
  translated_text: string;
  source_language: string;
  target_language: string;
  question_id?: number | null;
  section_id?: number | null;
  story_id?: number | null;
  context?: string | null;
}

export interface UpdateSnippetRequest {
  original_text?: string;
  translated_text?: string;
  source_language?: string;
  target_language?: string;
  context?: string | null;
}

export interface Snippet {
  id?: number;
  user_id?: number;
  original_text?: string;
  translated_text?: string;
  source_language?: string;
  target_language?: string;
  question_id?: number | null;
  section_id?: number | null;
  story_id?: number | null;
  context?: string | null;
  difficulty_level?: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface SnippetList {
  snippets?: Array<Snippet>;
  total?: number;
  limit?: number;
  offset?: number;
  query?: string | null;
}

export interface UsageStatsResponse {
  usage_stats: Record<string, Record<string,   characters_used?: number;
  requests_made?: number;
  quota?: number;>>;
  monthly_totals: Record<string, Record<string,   total_characters?: number;
  total_requests?: number;>>;
  services: Array<string>;
  cache_stats?:   total_cache_hits_requests?: number;
  total_cache_hits_characters?: number;
  total_cache_misses_requests?: number;
  cache_hit_rate?: number;;
}

export interface ServiceUsageStatsResponse {
  service: string;
  data: Array<  month?: string;
  usage_type?: string;
  characters_used?: number;
  requests_made?: number;
  quota?: number;>;
}

export interface APIKeyTestResponse {
  ok?: boolean;
  user_id?: number;
  username?: string;
  permission_level?: 'readonly' | 'full';
  api_key_id?: number;
  method?: string;
}

// Utility types
export type ApiResponse<T> = {
  data: T;
  status: number;
  message?: string;
};

export type ApiError = {
  error: string;
  details?: string;
  status: number;
};

// API endpoint response types
export type QuestionResponse = Question;
export type LoginResponseData = LoginResponse;
export type ProgressResponseData = UserProgress;
export type SettingsResponseData = SuccessResponse;

// API request types
export type LoginRequestData = LoginRequest;
export type AnswerRequestData = AnswerRequest;
export type SettingsRequestData = UserSettings;
export type TestAIRequestData = TestAIRequest;
