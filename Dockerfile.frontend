# syntax=docker/dockerfile:1.6
# Stage 1: Font Generation Stage (cached separately)
FROM --platform=$BUILDPLATFORM node:22-alpine AS font-generator

WORKDIR /app

# Install python3 for font script with retry logic
RUN --mount=type=cache,id=quiz-frontend-apk,sharing=locked,target=/var/cache/apk \
    apk update && apk add --no-progress python3

# Copy font self-hosting script
COPY scripts/self_host_fonts.py ./

# Create a minimal frontend structure for font analysis
RUN mkdir -p frontend/src frontend/public/fonts src

# Copy essential files that the font script might analyze
COPY frontend/src ./frontend/src
COPY frontend/public ./frontend/public
COPY frontend/index.html ./frontend/
COPY frontend/vite.config.ts ./frontend/
COPY frontend/tsconfig.json ./frontend/
COPY frontend/tsconfig.node.json ./frontend/

# Generate fonts (this layer will be cached unless font script or analyzed files change)
RUN python3 self_host_fonts.py

# Stage 2: Dependencies (cached separately)
FROM --platform=$BUILDPLATFORM node:22-alpine AS deps

WORKDIR /app

# Copy package files first
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,id=quiz-frontend-npm,sharing=locked,target=/root/.npm \
    npm ci --no-audit --no-fund --prefer-offline --legacy-peer-deps

# Stage 3: Build the React app
FROM --platform=$BUILDPLATFORM node:22-alpine AS builder

# Add build arguments for better caching
ARG BUILDKIT_INLINE_CACHE=1
# Add build arguments for versioning
ARG APP_VERSION=dev
ARG COMMIT_HASH=dev
ARG BUILD_TIME=unknown

ENV VITE_APP_VERSION=$APP_VERSION
ENV VITE_COMMIT_HASH=$COMMIT_HASH
ENV VITE_BUILD_TIME=$BUILD_TIME

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files for npm scripts
COPY frontend/package.json frontend/package-lock.json ./

# Copy the rest of the app's source code
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/index.html ./
COPY frontend/vite.config.ts ./
COPY frontend/tsconfig.json ./
COPY frontend/tsconfig.node.json ./
# Copy frontend scripts (build helpers) so npm postbuild scripts can run inside container
COPY frontend/scripts ./scripts

# Copy pre-generated fonts from font-generator stage
COPY --from=font-generator /app/frontend/public/fonts ./public/fonts
COPY --from=font-generator /app/src/fonts.css ./src/fonts.css

# Build the app with cache mounts for Vite and esbuild
RUN --mount=type=cache,id=quiz-frontend-vite,sharing=locked,target=/app/node_modules/.vite \
    --mount=type=cache,id=quiz-frontend-esbuild,sharing=locked,target=/root/.cache/esbuild \
    INLINE_RUNTIME_CHUNK=false npm run build

# --- CSP Nonce Automation (separate stage) ---
FROM python:3.12-alpine AS nonce
WORKDIR /app
# Copy built assets from builder
COPY --from=builder /app/dist ./dist
# Copy nonce scripts and nginx config from repo context
COPY scripts/add_nonces_to_built_html.py ./
COPY scripts/inject_csp_nonce.py ./
COPY nginx.conf ./
COPY nginx/ ./nginx/
# Run nonce scripts against built assets and nginx.conf
RUN python3 add_nonces_to_built_html.py
RUN python3 inject_csp_nonce.py

# Stage 4: Serve the app with official NGINX (with OpenTelemetry support)
FROM nginx:stable-otel AS nginx-base

# Install wget without updating package lists (faster and avoids security issues)
# RUN apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/*

# Copy the built app from the nonce stage (after CSP nonce processing)
COPY --from=nonce /app/dist /usr/share/nginx/html
# Copy the self-hosted fonts
COPY --from=builder /app/public/fonts /usr/share/nginx/html/fonts

# Fix permissions for nginx to serve static assets
RUN chmod -R 644 /usr/share/nginx/html/assets/* /usr/share/nginx/html/*.svg /usr/share/nginx/html/fonts/* && \
    chmod 755 /usr/share/nginx/html/fonts && \
    find /usr/share/nginx/html -type d -exec chmod 755 {} \;

# Copy the nginx configuration
COPY --from=nonce /app/nginx.conf /etc/nginx/nginx.conf
# Copy rate-limit snippet includes (enabled by default)
COPY --from=nonce /app/nginx/snippets/on/ /etc/nginx/snippets/

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
