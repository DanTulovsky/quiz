// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes  = "cookieAuth.Scopes"
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ChatMessageRole.
const (
	ChatMessageRoleAssistant ChatMessageRole = "assistant"
	ChatMessageRoleUser      ChatMessageRole = "user"
)

// Defines values for CreateMessageRequestRole.
const (
	CreateMessageRequestRoleAssistant CreateMessageRequestRole = "assistant"
	CreateMessageRequestRoleUser      CreateMessageRequestRole = "user"
)

// Defines values for CreateStoryRequestSectionLengthOverride.
const (
	CreateStoryRequestSectionLengthOverrideLong   CreateStoryRequestSectionLengthOverride = "long"
	CreateStoryRequestSectionLengthOverrideMedium CreateStoryRequestSectionLengthOverride = "medium"
	CreateStoryRequestSectionLengthOverrideShort  CreateStoryRequestSectionLengthOverride = "short"
)

// Defines values for ErrorResponseSeverity.
const (
	ErrorResponseSeverityError ErrorResponseSeverity = "error"
	ErrorResponseSeverityFatal ErrorResponseSeverity = "fatal"
	ErrorResponseSeverityInfo  ErrorResponseSeverity = "info"
	ErrorResponseSeverityWarn  ErrorResponseSeverity = "warn"
)

// Defines values for FeedbackReportFeedbackType.
const (
	FeedbackReportFeedbackTypeBug            FeedbackReportFeedbackType = "bug"
	FeedbackReportFeedbackTypeFeatureRequest FeedbackReportFeedbackType = "feature_request"
	FeedbackReportFeedbackTypeGeneral        FeedbackReportFeedbackType = "general"
	FeedbackReportFeedbackTypeImprovement    FeedbackReportFeedbackType = "improvement"
)

// Defines values for FeedbackReportStatus.
const (
	FeedbackReportStatusDismissed  FeedbackReportStatus = "dismissed"
	FeedbackReportStatusInProgress FeedbackReportStatus = "in_progress"
	FeedbackReportStatusNew        FeedbackReportStatus = "new"
	FeedbackReportStatusResolved   FeedbackReportStatus = "resolved"
)

// Defines values for FeedbackSubmissionRequestFeedbackType.
const (
	FeedbackSubmissionRequestFeedbackTypeBug            FeedbackSubmissionRequestFeedbackType = "bug"
	FeedbackSubmissionRequestFeedbackTypeFeatureRequest FeedbackSubmissionRequestFeedbackType = "feature_request"
	FeedbackSubmissionRequestFeedbackTypeGeneral        FeedbackSubmissionRequestFeedbackType = "general"
	FeedbackSubmissionRequestFeedbackTypeImprovement    FeedbackSubmissionRequestFeedbackType = "improvement"
)

// Defines values for FeedbackUpdateRequestStatus.
const (
	FeedbackUpdateRequestStatusDismissed  FeedbackUpdateRequestStatus = "dismissed"
	FeedbackUpdateRequestStatusInProgress FeedbackUpdateRequestStatus = "in_progress"
	FeedbackUpdateRequestStatusNew        FeedbackUpdateRequestStatus = "new"
	FeedbackUpdateRequestStatusResolved   FeedbackUpdateRequestStatus = "resolved"
)

// Defines values for NotificationErrorErrorType.
const (
	NotificationErrorErrorTypeEmailDisabled NotificationErrorErrorType = "email_disabled"
	NotificationErrorErrorTypeOther         NotificationErrorErrorType = "other"
	NotificationErrorErrorTypeSmtpError     NotificationErrorErrorType = "smtp_error"
	NotificationErrorErrorTypeTemplateError NotificationErrorErrorType = "template_error"
	NotificationErrorErrorTypeUserNotFound  NotificationErrorErrorType = "user_not_found"
)

// Defines values for NotificationErrorNotificationType.
const (
	NotificationErrorNotificationTypeDailyReminder NotificationErrorNotificationType = "daily_reminder"
	NotificationErrorNotificationTypeTestEmail     NotificationErrorNotificationType = "test_email"
)

// Defines values for QuestionStatus.
const (
	QuestionStatusActive   QuestionStatus = "active"
	QuestionStatusReported QuestionStatus = "reported"
)

// Defines values for QuestionType.
const (
	FillBlank            QuestionType = "fill_blank"
	Qa                   QuestionType = "qa"
	ReadingComprehension QuestionType = "reading_comprehension"
	Vocabulary           QuestionType = "vocabulary"
)

// Defines values for SentNotificationNotificationType.
const (
	SentNotificationNotificationTypeDailyReminder SentNotificationNotificationType = "daily_reminder"
	SentNotificationNotificationTypeTestEmail     SentNotificationNotificationType = "test_email"
)

// Defines values for SentNotificationStatus.
const (
	SentNotificationStatusBounced SentNotificationStatus = "bounced"
	SentNotificationStatusFailed  SentNotificationStatus = "failed"
	SentNotificationStatusSent    SentNotificationStatus = "sent"
)

// Defines values for StorySectionLengthOverride.
const (
	StorySectionLengthOverrideLong   StorySectionLengthOverride = "long"
	StorySectionLengthOverrideMedium StorySectionLengthOverride = "medium"
	StorySectionLengthOverrideShort  StorySectionLengthOverride = "short"
)

// Defines values for StoryStatus.
const (
	StoryStatusActive    StoryStatus = "active"
	StoryStatusArchived  StoryStatus = "archived"
	StoryStatusCompleted StoryStatus = "completed"
)

// Defines values for StoryWithSectionsSectionLengthOverride.
const (
	Long   StoryWithSectionsSectionLengthOverride = "long"
	Medium StoryWithSectionsSectionLengthOverride = "medium"
	Short  StoryWithSectionsSectionLengthOverride = "short"
)

// Defines values for StoryWithSectionsStatus.
const (
	Active    StoryWithSectionsStatus = "active"
	Archived  StoryWithSectionsStatus = "archived"
	Completed StoryWithSectionsStatus = "completed"
)

// Defines values for TTSRequestStreamFormat.
const (
	Mp3 TTSRequestStreamFormat = "mp3"
	Sse TTSRequestStreamFormat = "sse"
	Wav TTSRequestStreamFormat = "wav"
)

// Defines values for TTSResponseType.
const (
	TTSResponseTypeAudio TTSResponseType = "audio"
	TTSResponseTypeError TTSResponseType = "error"
	TTSResponseTypeUsage TTSResponseType = "usage"
)

// Defines values for WordOfTheDayDisplaySourceType.
const (
	WordOfTheDayDisplaySourceTypeSnippet            WordOfTheDayDisplaySourceType = "snippet"
	WordOfTheDayDisplaySourceTypeVocabularyQuestion WordOfTheDayDisplaySourceType = "vocabulary_question"
)

// Defines values for WorkerStatusStatus.
const (
	Busy  WorkerStatusStatus = "busy"
	Error WorkerStatusStatus = "error"
	Idle  WorkerStatusStatus = "idle"
)

// Defines values for DeleteV1AdminBackendFeedbackParamsStatus.
const (
	DeleteV1AdminBackendFeedbackParamsStatusDismissed  DeleteV1AdminBackendFeedbackParamsStatus = "dismissed"
	DeleteV1AdminBackendFeedbackParamsStatusInProgress DeleteV1AdminBackendFeedbackParamsStatus = "in_progress"
	DeleteV1AdminBackendFeedbackParamsStatusNew        DeleteV1AdminBackendFeedbackParamsStatus = "new"
	DeleteV1AdminBackendFeedbackParamsStatusResolved   DeleteV1AdminBackendFeedbackParamsStatus = "resolved"
)

// Defines values for GetV1AdminBackendFeedbackParamsStatus.
const (
	GetV1AdminBackendFeedbackParamsStatusDismissed  GetV1AdminBackendFeedbackParamsStatus = "dismissed"
	GetV1AdminBackendFeedbackParamsStatusInProgress GetV1AdminBackendFeedbackParamsStatus = "in_progress"
	GetV1AdminBackendFeedbackParamsStatusNew        GetV1AdminBackendFeedbackParamsStatus = "new"
	GetV1AdminBackendFeedbackParamsStatusResolved   GetV1AdminBackendFeedbackParamsStatus = "resolved"
)

// Defines values for GetV1AdminBackendUserzPaginatedParamsAiEnabled.
const (
	GetV1AdminBackendUserzPaginatedParamsAiEnabledFalse GetV1AdminBackendUserzPaginatedParamsAiEnabled = "false"
	GetV1AdminBackendUserzPaginatedParamsAiEnabledTrue  GetV1AdminBackendUserzPaginatedParamsAiEnabled = "true"
)

// Defines values for GetV1AdminBackendUserzPaginatedParamsActive.
const (
	GetV1AdminBackendUserzPaginatedParamsActiveFalse GetV1AdminBackendUserzPaginatedParamsActive = "false"
	GetV1AdminBackendUserzPaginatedParamsActiveTrue  GetV1AdminBackendUserzPaginatedParamsActive = "true"
)

// Defines values for GetV1AdminWorkerNotificationsErrorsParamsErrorType.
const (
	GetV1AdminWorkerNotificationsErrorsParamsErrorTypeEmailDisabled GetV1AdminWorkerNotificationsErrorsParamsErrorType = "email_disabled"
	GetV1AdminWorkerNotificationsErrorsParamsErrorTypeOther         GetV1AdminWorkerNotificationsErrorsParamsErrorType = "other"
	GetV1AdminWorkerNotificationsErrorsParamsErrorTypeSmtpError     GetV1AdminWorkerNotificationsErrorsParamsErrorType = "smtp_error"
	GetV1AdminWorkerNotificationsErrorsParamsErrorTypeTemplateError GetV1AdminWorkerNotificationsErrorsParamsErrorType = "template_error"
	GetV1AdminWorkerNotificationsErrorsParamsErrorTypeUserNotFound  GetV1AdminWorkerNotificationsErrorsParamsErrorType = "user_not_found"
)

// Defines values for GetV1AdminWorkerNotificationsErrorsParamsNotificationType.
const (
	GetV1AdminWorkerNotificationsErrorsParamsNotificationTypeDailyReminder GetV1AdminWorkerNotificationsErrorsParamsNotificationType = "daily_reminder"
	GetV1AdminWorkerNotificationsErrorsParamsNotificationTypeTestEmail     GetV1AdminWorkerNotificationsErrorsParamsNotificationType = "test_email"
)

// Defines values for GetV1AdminWorkerNotificationsErrorsParamsResolved.
const (
	False GetV1AdminWorkerNotificationsErrorsParamsResolved = "false"
	True  GetV1AdminWorkerNotificationsErrorsParamsResolved = "true"
)

// Defines values for GetV1AdminWorkerNotificationsSentParamsNotificationType.
const (
	GetV1AdminWorkerNotificationsSentParamsNotificationTypeDailyReminder GetV1AdminWorkerNotificationsSentParamsNotificationType = "daily_reminder"
	GetV1AdminWorkerNotificationsSentParamsNotificationTypeTestEmail     GetV1AdminWorkerNotificationsSentParamsNotificationType = "test_email"
)

// Defines values for GetV1AdminWorkerNotificationsSentParamsStatus.
const (
	GetV1AdminWorkerNotificationsSentParamsStatusBounced GetV1AdminWorkerNotificationsSentParamsStatus = "bounced"
	GetV1AdminWorkerNotificationsSentParamsStatusFailed  GetV1AdminWorkerNotificationsSentParamsStatus = "failed"
	GetV1AdminWorkerNotificationsSentParamsStatusSent    GetV1AdminWorkerNotificationsSentParamsStatus = "sent"
)

// Defines values for PostV1ApiKeysJSONBodyPermissionLevel.
const (
	Full     PostV1ApiKeysJSONBodyPermissionLevel = "full"
	Readonly PostV1ApiKeysJSONBodyPermissionLevel = "readonly"
)

// Defines values for GetV1SnippetsParamsLevel.
const (
	A1 GetV1SnippetsParamsLevel = "A1"
	A2 GetV1SnippetsParamsLevel = "A2"
	B1 GetV1SnippetsParamsLevel = "B1"
	B2 GetV1SnippetsParamsLevel = "B2"
	C1 GetV1SnippetsParamsLevel = "C1"
	C2 GetV1SnippetsParamsLevel = "C2"
)

// AIConcurrencyStats defines model for AIConcurrencyStats.
type AIConcurrencyStats struct {
	ActiveRequests  *int            `json:"active_requests,omitempty"`
	MaxConcurrent   *int            `json:"max_concurrent,omitempty"`
	MaxPerUser      *int            `json:"max_per_user,omitempty"`
	QueuedRequests  *int            `json:"queued_requests,omitempty"`
	TotalRequests   *int            `json:"total_requests,omitempty"`
	UserActiveCount *map[string]int `json:"user_active_count,omitempty"`
}

// AIProviders defines model for AIProviders.
type AIProviders struct {
	Levels    *[]string `json:"levels,omitempty"`
	Providers *[]struct {
		Code   *string `json:"code,omitempty"`
		Models *[]struct {
			Code *string `json:"code,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"models,omitempty"`
		Name *string `json:"name,omitempty"`
		Url  *string `json:"url,omitempty"`

		// UsageSupported Whether the provider supports usage tracking in streaming responses
		UsageSupported *bool `json:"usage_supported,omitempty"`
	} `json:"providers,omitempty"`
}

// APIKeyAvailabilityResponse defines model for APIKeyAvailabilityResponse.
type APIKeyAvailabilityResponse struct {
	// HasApiKey Whether the user has a saved API key for this provider
	HasApiKey bool `json:"has_api_key"`
}

// AggregatedVersion defines model for AggregatedVersion.
type AggregatedVersion struct {
	Backend ServiceVersion           `json:"backend"`
	Worker  AggregatedVersion_Worker `json:"worker"`
}

// AggregatedVersionWorker1 defines model for .
type AggregatedVersionWorker1 struct {
	// Error Error message when worker is unavailable
	Error string `json:"error"`
}

// AggregatedVersion_Worker defines model for AggregatedVersion.Worker.
type AggregatedVersion_Worker struct {
	union json.RawMessage
}

// AnswerRequest defines model for AnswerRequest.
type AnswerRequest struct {
	// QuestionId ID of the question being answered
	QuestionId int64 `json:"question_id"`

	// ResponseTimeMs Response time in milliseconds (0-5 minutes)
	ResponseTimeMs *int32 `json:"response_time_ms,omitempty"`

	// UserAnswerIndex Index of the user's selected answer in the original options array (0-based)
	UserAnswerIndex int `json:"user_answer_index"`
}

// AnswerResponse defines model for AnswerResponse.
type AnswerResponse struct {
	// CorrectAnswerIndex Index of the correct answer in the options array (0-based)
	CorrectAnswerIndex *int    `json:"correct_answer_index,omitempty"`
	Explanation        *string `json:"explanation,omitempty"`
	IsCorrect          *bool   `json:"is_correct,omitempty"`
	NextDifficulty     *string `json:"next_difficulty,omitempty"`

	// UserAnswer The answer selected by the user
	UserAnswer *string `json:"user_answer,omitempty"`

	// UserAnswerIndex Index of the user's selected answer in the original options array (0-based)
	UserAnswerIndex *int `json:"user_answer_index,omitempty"`
}

// AuthStatusResponse defines model for AuthStatusResponse.
type AuthStatusResponse struct {
	// Authenticated Whether the user is currently authenticated
	Authenticated bool `json:"authenticated"`
	User          User `json:"user"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	// Bookmarked Whether this message is bookmarked
	Bookmarked *bool `json:"bookmarked,omitempty"`

	// Content Message content
	Content struct {
		// Text The actual message text
		Text *string `json:"text,omitempty"`
	} `json:"content"`

	// ConversationId ID of the conversation this message belongs to
	ConversationId openapi_types.UUID `json:"conversation_id"`

	// ConversationTitle Title of the conversation (optional, included in search results)
	ConversationTitle *string `json:"conversation_title,omitempty"`

	// CreatedAt When the message was created
	CreatedAt time.Time `json:"created_at"`

	// Id Message UUID
	Id openapi_types.UUID `json:"id"`

	// QuestionId Optional question ID if this message relates to a specific question
	QuestionId *int `json:"question_id,omitempty"`

	// Role Role of the message sender
	Role ChatMessageRole `json:"role"`

	// UpdatedAt When the message was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ChatMessageRole Role of the message sender
type ChatMessageRole string

// Conversation defines model for Conversation.
type Conversation struct {
	// CreatedAt When the conversation was created
	CreatedAt time.Time `json:"created_at"`

	// Id Conversation UUID
	Id openapi_types.UUID `json:"id"`

	// MessageCount Total number of messages in this conversation
	MessageCount *int `json:"message_count,omitempty"`

	// Messages Array of messages in this conversation (optional, only included when requested)
	Messages *[]ChatMessage `json:"messages,omitempty"`

	// Title Conversation title
	Title string `json:"title"`

	// UpdatedAt When the conversation was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// UserId ID of the user who owns this conversation
	UserId int `json:"user_id"`
}

// CreateConversationRequest defines model for CreateConversationRequest.
type CreateConversationRequest struct {
	// Title Title for the conversation
	Title string `json:"title"`
}

// CreateMessageRequest defines model for CreateMessageRequest.
type CreateMessageRequest struct {
	// Content Message content
	Content struct {
		// Text The actual message text
		Text *string `json:"text,omitempty"`
	} `json:"content"`

	// QuestionId Optional question ID if this message relates to a specific question
	QuestionId *int `json:"question_id,omitempty"`

	// Role Role of the message sender
	Role CreateMessageRequestRole `json:"role"`
}

// CreateMessageRequestRole Role of the message sender
type CreateMessageRequestRole string

// CreateSnippetRequest defines model for CreateSnippetRequest.
type CreateSnippetRequest struct {
	// Context Optional user-provided context or notes about this snippet
	Context *string `json:"context"`

	// OriginalText The original text/word to save
	OriginalText string `json:"original_text"`

	// QuestionId Optional ID of the question where this text was encountered. If provided, the snippet will inherit the question's difficulty level (A1, A2, B1, B2, C1, C2)
	QuestionId *int64 `json:"question_id"`

	// SectionId Optional ID of the story section where this text was encountered
	SectionId *int64 `json:"section_id"`

	// SourceLanguage ISO language code of the source text
	SourceLanguage string `json:"source_language"`

	// StoryId Optional ID of the story where this text was encountered
	StoryId *int64 `json:"story_id"`

	// TargetLanguage ISO language code of the target translation
	TargetLanguage string `json:"target_language"`

	// TranslatedText The translated text
	TranslatedText string `json:"translated_text"`
}

// CreateStoryRequest defines model for CreateStoryRequest.
type CreateStoryRequest struct {
	AuthorStyle           *string                                  `json:"author_style"`
	CharacterNames        *string                                  `json:"character_names"`
	CustomInstructions    *string                                  `json:"custom_instructions"`
	Genre                 *string                                  `json:"genre"`
	SectionLengthOverride *CreateStoryRequestSectionLengthOverride `json:"section_length_override,omitempty"`
	Subject               *string                                  `json:"subject"`
	TimePeriod            *string                                  `json:"time_period"`
	Title                 string                                   `json:"title"`
	Tone                  *string                                  `json:"tone"`
}

// CreateStoryRequestSectionLengthOverride defines model for CreateStoryRequest.SectionLengthOverride.
type CreateStoryRequestSectionLengthOverride string

// DailyProgress defines model for DailyProgress.
type DailyProgress struct {
	// Completed Number of completed questions
	Completed int `json:"completed"`

	// Date Date for the progress report (YYYY-MM-DD)
	Date openapi_types.Date `json:"date"`

	// Total Total number of questions assigned for the date
	Total int `json:"total"`
}

// DailyQuestionHistory defines model for DailyQuestionHistory.
type DailyQuestionHistory struct {
	// AssignmentDate RFC3339 timestamp of when the question was assigned in the user's timezone (includes offset)
	AssignmentDate string `json:"assignment_date"`

	// IsCompleted Whether the question was completed on this date
	IsCompleted bool `json:"is_completed"`

	// IsCorrect Whether the user's answer was correct (null if not attempted)
	IsCorrect *bool `json:"is_correct"`

	// SubmittedAt When the user submitted their answer
	SubmittedAt *string `json:"submitted_at"`
}

// DailyQuestionWithDetails defines model for DailyQuestionWithDetails.
type DailyQuestionWithDetails struct {
	// AssignmentDate Date-only assignment (YYYY-MM-DD) representing the logical calendar day the question was assigned (no timezone offset)
	AssignmentDate openapi_types.Date `json:"assignment_date"`

	// CompletedAt When the question was completed (if completed)
	CompletedAt *string `json:"completed_at"`

	// CreatedAt When the assignment was created
	CreatedAt string `json:"created_at"`

	// Id Daily question assignment ID
	Id int64 `json:"id"`

	// IsCompleted Whether the question has been completed
	IsCompleted bool     `json:"is_completed"`
	Question    Question `json:"question"`

	// QuestionId Question ID
	QuestionId int64 `json:"question_id"`

	// SubmittedAt When the user submitted their answer
	SubmittedAt *string `json:"submitted_at"`

	// UserAnswerIndex The index of the answer option the user selected (0-based)
	UserAnswerIndex *int `json:"user_answer_index"`

	// UserCorrectCount Number of times this user answered this question correctly
	UserCorrectCount *int64 `json:"user_correct_count,omitempty"`

	// UserId User ID
	UserId int64 `json:"user_id"`

	// UserIncorrectCount Number of times this user answered this question incorrectly
	UserIncorrectCount *int64 `json:"user_incorrect_count,omitempty"`

	// UserShownCount Number of times this question was shown to this user in Daily view
	UserShownCount *int64 `json:"user_shown_count,omitempty"`

	// UserTotalResponses Number of times this user answered this question
	UserTotalResponses *int64 `json:"user_total_responses,omitempty"`
}

// DashboardResponse defines model for DashboardResponse.
type DashboardResponse struct {
	AiConcurrencyStats *AIConcurrencyStats `json:"ai_concurrency_stats,omitempty"`
	QuestionStats      *QuestionStats      `json:"question_stats,omitempty"`
	Users              *[]DashboardUser    `json:"users,omitempty"`
	WorkerBaseUrl      *string             `json:"worker_base_url,omitempty"`
	WorkerHealth       *WorkerHealth       `json:"worker_health,omitempty"`
	WorkerPort         *string             `json:"worker_port,omitempty"`
}

// DashboardUser defines model for DashboardUser.
type DashboardUser struct {
	Progress      *UserProgress      `json:"progress,omitempty"`
	QuestionStats *UserQuestionStats `json:"question_stats,omitempty"`
	User          *UserProfile       `json:"user,omitempty"`
}

// EmptyRequest Empty request body for endpoints that don't require request data
type EmptyRequest = map[string]interface{}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code identifying the type of error
	Code *string `json:"code,omitempty"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error message (for backward compatibility)
	Error *string `json:"error,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// Retryable Whether the operation can be retried
	Retryable *bool `json:"retryable,omitempty"`

	// Severity Severity level of the error
	Severity *ErrorResponseSeverity `json:"severity,omitempty"`
}

// ErrorResponseSeverity Severity level of the error
type ErrorResponseSeverity string

// FeedbackListResponse defines model for FeedbackListResponse.
type FeedbackListResponse struct {
	// Items List of feedback reports
	Items []FeedbackReport `json:"items"`

	// Page Current page number
	Page int `json:"page"`

	// PageSize Number of items per page
	PageSize int `json:"page_size"`

	// Total Total number of feedback reports matching filters
	Total int `json:"total"`
}

// FeedbackReport defines model for FeedbackReport.
type FeedbackReport struct {
	// AdminNotes Notes from admin
	AdminNotes *string `json:"admin_notes"`

	// AssignedToUserId User ID assigned to handle this feedback
	AssignedToUserId *int64 `json:"assigned_to_user_id"`

	// ContextData Context metadata as JSON object
	ContextData *map[string]interface{} `json:"context_data,omitempty"`

	// CreatedAt When the feedback was created
	CreatedAt time.Time `json:"created_at"`

	// FeedbackText Feedback or issue description
	FeedbackText string `json:"feedback_text"`

	// FeedbackType Type of feedback
	FeedbackType FeedbackReportFeedbackType `json:"feedback_type"`

	// Id Feedback report ID
	Id int64 `json:"id"`

	// ResolvedAt When the feedback was resolved
	ResolvedAt *time.Time `json:"resolved_at"`

	// ResolvedByUserId User ID who resolved the feedback
	ResolvedByUserId *int64 `json:"resolved_by_user_id"`

	// ScreenshotData Base64 encoded screenshot
	ScreenshotData *string `json:"screenshot_data"`

	// ScreenshotUrl URL to stored screenshot file
	ScreenshotUrl *string `json:"screenshot_url"`

	// Status Current status of the feedback
	Status FeedbackReportStatus `json:"status"`

	// UpdatedAt When the feedback was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// UserId User ID who submitted the feedback
	UserId int64 `json:"user_id"`
}

// FeedbackReportFeedbackType Type of feedback
type FeedbackReportFeedbackType string

// FeedbackReportStatus Current status of the feedback
type FeedbackReportStatus string

// FeedbackSubmissionRequest defines model for FeedbackSubmissionRequest.
type FeedbackSubmissionRequest struct {
	// ContextData Context metadata as JSON object
	ContextData *map[string]interface{} `json:"context_data,omitempty"`

	// FeedbackText Feedback or issue description
	FeedbackText string `json:"feedback_text"`

	// FeedbackType Type of feedback
	FeedbackType *FeedbackSubmissionRequestFeedbackType `json:"feedback_type,omitempty"`

	// ScreenshotData Base64 encoded screenshot (optional)
	ScreenshotData *[]byte `json:"screenshot_data,omitempty"`
}

// FeedbackSubmissionRequestFeedbackType Type of feedback
type FeedbackSubmissionRequestFeedbackType string

// FeedbackUpdateRequest defines model for FeedbackUpdateRequest.
type FeedbackUpdateRequest struct {
	// AdminNotes Admin notes about this feedback
	AdminNotes *string `json:"admin_notes,omitempty"`

	// AssignedToUserId User ID to assign this feedback to
	AssignedToUserId *int64 `json:"assigned_to_user_id,omitempty"`

	// ResolvedAt When the feedback was resolved (use current time if status is resolved)
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`

	// ResolvedByUserId User ID who resolved the feedback
	ResolvedByUserId *int64 `json:"resolved_by_user_id,omitempty"`

	// Status New status for the feedback
	Status *FeedbackUpdateRequestStatus `json:"status,omitempty"`
}

// FeedbackUpdateRequestStatus New status for the feedback
type FeedbackUpdateRequestStatus string

// ForceSendNotificationResponse defines model for ForceSendNotificationResponse.
type ForceSendNotificationResponse struct {
	Message      *string `json:"message,omitempty"`
	Notification *struct {
		Status  *string `json:"status,omitempty"`
		Subject *string `json:"subject,omitempty"`
		Type    *string `json:"type,omitempty"`
	} `json:"notification,omitempty"`
	User *struct {
		Email    *string `json:"email,omitempty"`
		Id       *int64  `json:"id,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// GeneratingResponse defines model for GeneratingResponse.
type GeneratingResponse struct {
	// AiModel User's preferred AI model
	AiModel *string `json:"ai_model,omitempty"`

	// ApiKey User's API key for the selected provider (write-only)
	ApiKey  *string `json:"api_key,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// GenerationFocus defines model for GenerationFocus.
type GenerationFocus struct {
	// CurrentGenerationModel The AI model currently being used for generation
	CurrentGenerationModel *string `json:"current_generation_model,omitempty"`

	// GenerationRate Average number of questions generated per minute
	GenerationRate *float32 `json:"generation_rate,omitempty"`

	// LastGenerationTime Timestamp of the last time a question was generated
	LastGenerationTime *string `json:"last_generation_time,omitempty"`
}

// GenerationIntelligence defines model for GenerationIntelligence.
type GenerationIntelligence struct {
	GapAnalysis           *[]map[string]interface{} `json:"gapAnalysis,omitempty"`
	GenerationSuggestions *[]map[string]interface{} `json:"generationSuggestions,omitempty"`
}

// GoogleOAuthLoginResponse defines model for GoogleOAuthLoginResponse.
type GoogleOAuthLoginResponse struct {
	// AuthUrl The Google OAuth authorization URL to redirect the user to
	AuthUrl string `json:"auth_url"`
}

// Language Learning language (dynamic). Allowed values come from config.yaml language_levels keys.
type Language = string

// LanguageInfo defines model for LanguageInfo.
type LanguageInfo struct {
	// Code ISO language code
	Code string `json:"code"`

	// Name Human-readable language name
	Name string `json:"name"`

	// TtsLocale TTS locale code for this language
	TtsLocale *string `json:"tts_locale,omitempty"`

	// TtsVoice Default TTS voice for this language
	TtsVoice *string `json:"tts_voice,omitempty"`
}

// LanguagesResponse Array of available learning languages with codes and names
type LanguagesResponse = []LanguageInfo

// Level Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6).
type Level = string

// LevelsResponse defines model for LevelsResponse.
type LevelsResponse struct {
	// LevelDescriptions Mapping from level code to short label (e.g. Beginner, Intermediate)
	LevelDescriptions map[string]string `json:"level_descriptions"`

	// Levels Array of available language proficiency levels
	Levels []string `json:"levels"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Password Password (minimum 8 characters)
	Password string `json:"password"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Message *string `json:"message,omitempty"`

	// RedirectUri Redirect URI for OAuth flows (optional)
	RedirectUri *string `json:"redirect_uri,omitempty"`
	Success     *bool   `json:"success,omitempty"`
	User        *User   `json:"user,omitempty"`
}

// MarkQuestionKnownRequest defines model for MarkQuestionKnownRequest.
type MarkQuestionKnownRequest struct {
	// ConfidenceLevel User's confidence level (1-5, optional)
	ConfidenceLevel *int `json:"confidence_level,omitempty"`
}

// NotificationError defines model for NotificationError.
type NotificationError struct {
	// EmailAddress Email address that was being used
	EmailAddress *string `json:"email_address"`

	// ErrorMessage Detailed error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// ErrorType Type of error that occurred
	ErrorType *NotificationErrorErrorType `json:"error_type,omitempty"`
	Id        *int64                      `json:"id,omitempty"`

	// NotificationType Type of notification that failed
	NotificationType *NotificationErrorNotificationType `json:"notification_type,omitempty"`

	// OccurredAt When the error occurred
	OccurredAt *string `json:"occurred_at,omitempty"`

	// ResolutionNotes Notes about how the error was resolved
	ResolutionNotes *string `json:"resolution_notes"`

	// ResolvedAt When the error was resolved
	ResolvedAt *string `json:"resolved_at"`
	UserId     *int64  `json:"user_id"`

	// Username Username of the user (if available)
	Username *string `json:"username,omitempty"`
}

// NotificationErrorErrorType Type of error that occurred
type NotificationErrorErrorType string

// NotificationErrorNotificationType Type of notification that failed
type NotificationErrorNotificationType string

// NotificationErrorStats defines model for NotificationErrorStats.
type NotificationErrorStats struct {
	// ErrorsByNotificationType Breakdown of errors by notification type
	ErrorsByNotificationType *map[string]int `json:"errors_by_notification_type,omitempty"`

	// ErrorsByType Breakdown of errors by type
	ErrorsByType *map[string]int `json:"errors_by_type,omitempty"`

	// TotalErrors Total number of errors
	TotalErrors *int `json:"total_errors,omitempty"`

	// UnresolvedErrors Number of unresolved errors
	UnresolvedErrors *int `json:"unresolved_errors,omitempty"`
}

// NotificationStats defines model for NotificationStats.
type NotificationStats struct {
	// NotificationsByType Breakdown of notifications by type
	NotificationsByType *map[string]int `json:"notifications_by_type,omitempty"`

	// SentThisWeek Number of notifications sent this week
	SentThisWeek *int `json:"sent_this_week,omitempty"`

	// SentToday Number of notifications sent today
	SentToday *int `json:"sent_today,omitempty"`

	// SuccessRate Success rate as a percentage (0-1)
	SuccessRate *float32 `json:"success_rate,omitempty"`

	// TotalFailed Total number of notifications that failed
	TotalFailed *int `json:"total_failed,omitempty"`

	// TotalSent Total number of notifications sent
	TotalSent *int `json:"total_sent,omitempty"`
}

// PaginationInfo defines model for PaginationInfo.
type PaginationInfo struct {
	// Page Current page number
	Page int `json:"page"`

	// PageSize Number of items per page
	PageSize int `json:"page_size"`

	// Total Total number of items
	Total int `json:"total"`

	// TotalPages Total number of pages
	TotalPages int `json:"total_pages"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	// NewPassword New password (minimum 8 characters)
	NewPassword string `json:"new_password"`
}

// PerformanceMetrics defines model for PerformanceMetrics.
type PerformanceMetrics struct {
	AverageResponseTimeMs *float32 `json:"average_response_time_ms,omitempty"`
	CorrectAttempts       *int     `json:"correct_attempts,omitempty"`
	LastUpdated           *string  `json:"last_updated,omitempty"`
	TotalAttempts         *int     `json:"total_attempts,omitempty"`
}

// PriorityInsights defines model for PriorityInsights.
type PriorityInsights struct {
	// HighPriorityQuestions Number of high-priority questions
	HighPriorityQuestions *int `json:"high_priority_questions,omitempty"`

	// LowPriorityQuestions Number of low-priority questions
	LowPriorityQuestions *int `json:"low_priority_questions,omitempty"`

	// MediumPriorityQuestions Number of medium-priority questions
	MediumPriorityQuestions *int `json:"medium_priority_questions,omitempty"`

	// TotalQuestionsInQueue Total number of questions waiting to be processed
	TotalQuestionsInQueue *int `json:"total_questions_in_queue,omitempty"`
}

// Question defines model for Question.
type Question struct {
	// ConfidenceLevel Confidence level when question was marked as known (1-5)
	ConfidenceLevel *int `json:"confidence_level,omitempty"`

	// Content All question types now use multiple choice format with 4 options
	Content *QuestionContent `json:"content,omitempty"`

	// CorrectAnswer Index of the correct answer in the options array (0-based)
	CorrectAnswer *int `json:"correct_answer,omitempty"`

	// CorrectCount Number of times this question was answered correctly
	CorrectCount *int    `json:"correct_count,omitempty"`
	CreatedAt    *string `json:"created_at,omitempty"`

	// DifficultyModifier Difficulty modifier for the question (e.g., basic, intermediate)
	DifficultyModifier *string  `json:"difficulty_modifier,omitempty"`
	DifficultyScore    *float32 `json:"difficulty_score,omitempty"`
	Explanation        *string  `json:"explanation,omitempty"`

	// GrammarFocus Grammar focus area for the question (e.g., present_perfect, conditionals)
	GrammarFocus *string `json:"grammar_focus,omitempty"`
	Id           *int64  `json:"id,omitempty"`

	// IncorrectCount Number of times this question was answered incorrectly
	IncorrectCount *int `json:"incorrect_count,omitempty"`

	// Language Learning language (dynamic). Allowed values come from config.yaml language_levels keys.
	Language *Language `json:"language,omitempty"`

	// Level Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6).
	Level *Level `json:"level,omitempty"`

	// Reporters Comma-separated list of usernames who reported this question
	Reporters *string `json:"reporters,omitempty"`

	// Scenario Scenario context for the question (e.g., at_the_airport, in_a_restaurant)
	Scenario *string         `json:"scenario,omitempty"`
	Status   *QuestionStatus `json:"status,omitempty"`

	// StyleModifier Style modifier for the question (e.g., conversational, formal)
	StyleModifier *string `json:"style_modifier,omitempty"`

	// TimeContext Time context for the question (e.g., morning_routine, workday)
	TimeContext *string `json:"time_context,omitempty"`

	// TopicCategory General topic category for question context (e.g., daily_life, travel, work)
	TopicCategory *string `json:"topic_category,omitempty"`

	// TotalResponses Total number of responses to this question (used for 'Shown' in the UI)
	TotalResponses *int          `json:"total_responses,omitempty"`
	Type           *QuestionType `json:"type,omitempty"`

	// UserCount Number of users assigned to this question
	UserCount *int `json:"user_count,omitempty"`

	// VocabularyDomain Vocabulary domain for the question (e.g., food_and_dining, transportation)
	VocabularyDomain *string `json:"vocabulary_domain,omitempty"`
}

// QuestionContent All question types now use multiple choice format with 4 options
type QuestionContent struct {
	// Hint Optional hint for fill-in-blank questions
	Hint    *string  `json:"hint,omitempty"`
	Options []string `json:"options"`

	// Passage Only present for reading comprehension questions
	Passage  *string `json:"passage,omitempty"`
	Question string  `json:"question"`

	// Sentence Only present for vocabulary questions (context sentence)
	Sentence *string `json:"sentence,omitempty"`
}

// QuestionStats defines model for QuestionStats.
type QuestionStats struct {
	// QuestionsByLanguage Breakdown of questions by language
	QuestionsByLanguage *map[string]int `json:"questions_by_language,omitempty"`

	// QuestionsByLevel Breakdown of questions by level
	QuestionsByLevel *map[string]int `json:"questions_by_level,omitempty"`

	// QuestionsByType Breakdown of questions by type
	QuestionsByType *map[string]int `json:"questions_by_type,omitempty"`

	// TotalQuestions Total number of questions
	TotalQuestions *int `json:"total_questions,omitempty"`

	// TotalResponses Total number of responses
	TotalResponses *int `json:"total_responses,omitempty"`
}

// QuestionStatus defines model for QuestionStatus.
type QuestionStatus string

// QuestionType defines model for QuestionType.
type QuestionType string

// QuizChatRequest defines model for QuizChatRequest.
type QuizChatRequest struct {
	AnswerContext *AnswerResponse `json:"answer_context,omitempty"`

	// ConversationHistory Previous messages in the conversation
	ConversationHistory *[]ChatMessage `json:"conversation_history,omitempty"`
	Question            Question       `json:"question"`

	// UserMessage The user's message to the AI tutor.
	UserMessage string `json:"user_message"`
}

// ReportQuestionRequest defines model for ReportQuestionRequest.
type ReportQuestionRequest struct {
	// ReportReason Optional explanation for why the question is being reported
	ReportReason *string `json:"report_reason,omitempty"`
}

// Role defines model for Role.
type Role struct {
	// CreatedAt When the role was created
	CreatedAt string `json:"created_at"`

	// Description Role description
	Description string `json:"description"`

	// Id Role ID
	Id int64 `json:"id"`

	// Name Role name (e.g., "user", "admin")
	Name string `json:"name"`

	// UpdatedAt When the role was last updated
	UpdatedAt string `json:"updated_at"`
}

// SentNotification defines model for SentNotification.
type SentNotification struct {
	// EmailAddress Email address the notification was sent to
	EmailAddress *string `json:"email_address,omitempty"`

	// ErrorMessage Error message if the notification failed
	ErrorMessage *string `json:"error_message"`
	Id           *int64  `json:"id,omitempty"`

	// NotificationType Type of notification
	NotificationType *SentNotificationNotificationType `json:"notification_type,omitempty"`

	// RetryCount Number of times the notification was retried
	RetryCount *int `json:"retry_count,omitempty"`

	// SentAt When the notification was sent
	SentAt *string `json:"sent_at,omitempty"`

	// Status Status of the notification
	Status *SentNotificationStatus `json:"status,omitempty"`

	// Subject Subject line of the email
	Subject *string `json:"subject,omitempty"`

	// TemplateName Template used for the notification
	TemplateName *string `json:"template_name,omitempty"`
	UserId       *int64  `json:"user_id,omitempty"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

// SentNotificationNotificationType Type of notification
type SentNotificationNotificationType string

// SentNotificationStatus Status of the notification
type SentNotificationStatus string

// ServiceUsageStatsResponse defines model for ServiceUsageStatsResponse.
type ServiceUsageStatsResponse struct {
	Data []struct {
		// CharactersUsed Number of characters processed
		CharactersUsed *int `json:"characters_used,omitempty"`

		// Month First day of the month (YYYY-MM)
		Month *string `json:"month,omitempty"`

		// Quota Monthly quota for this service
		Quota *int `json:"quota,omitempty"`

		// RequestsMade Number of requests made
		RequestsMade *int `json:"requests_made,omitempty"`

		// UsageType Type of usage (e.g., "translation")
		UsageType *string `json:"usage_type,omitempty"`
	} `json:"data"`

	// Service Name of the service
	Service string `json:"service"`
}

// ServiceVersion defines model for ServiceVersion.
type ServiceVersion struct {
	// BuildTime Build timestamp (ISO8601)
	BuildTime string `json:"buildTime"`

	// Commit Git commit hash
	Commit string `json:"commit"`

	// Service Service name (e.g., 'backend', 'worker')
	Service string `json:"service"`

	// Version Version string (e.g., git tag or 'dev')
	Version string `json:"version"`
}

// SignupStatusResponse defines model for SignupStatusResponse.
type SignupStatusResponse struct {
	// SignupsDisabled Whether user signups are currently disabled
	SignupsDisabled bool `json:"signups_disabled"`
}

// Snippet defines model for Snippet.
type Snippet struct {
	Context   *string    `json:"context"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// DifficultyLevel CEFR level (A1, A2, B1, B2, C1, C2)
	DifficultyLevel *string `json:"difficulty_level"`
	Id              *int64  `json:"id,omitempty"`
	OriginalText    *string `json:"original_text,omitempty"`
	QuestionId      *int64  `json:"question_id"`

	// SectionId ID of the story section where this snippet was created
	SectionId      *int64  `json:"section_id"`
	SourceLanguage *string `json:"source_language,omitempty"`

	// StoryId ID of the story where this snippet was created
	StoryId        *int64     `json:"story_id"`
	TargetLanguage *string    `json:"target_language,omitempty"`
	TranslatedText *string    `json:"translated_text,omitempty"`
	UpdatedAt      *time.Time `json:"updated_at,omitempty"`
	UserId         *int64     `json:"user_id,omitempty"`
}

// SnippetList defines model for SnippetList.
type SnippetList struct {
	// Limit Number of snippets returned
	Limit *int `json:"limit,omitempty"`

	// Offset Number of snippets skipped
	Offset *int `json:"offset,omitempty"`

	// Query The search query that was used (if any)
	Query    *string    `json:"query"`
	Snippets *[]Snippet `json:"snippets,omitempty"`

	// Total Total number of snippets matching the query
	Total *int `json:"total,omitempty"`
}

// Story defines model for Story.
type Story struct {
	AuthorStyle *string `json:"author_style"`

	// AutoGenerationPaused When true, the worker will skip automatic section generation for this story
	AutoGenerationPaused   *bool                       `json:"auto_generation_paused,omitempty"`
	CharacterNames         *string                     `json:"character_names"`
	CreatedAt              *time.Time                  `json:"created_at,omitempty"`
	CustomInstructions     *string                     `json:"custom_instructions"`
	ExtraGenerationsToday  *int                        `json:"extra_generations_today,omitempty"`
	Genre                  *string                     `json:"genre"`
	Id                     *int64                      `json:"id,omitempty"`
	Language               *string                     `json:"language,omitempty"`
	LastSectionGeneratedAt *time.Time                  `json:"last_section_generated_at"`
	SectionLengthOverride  *StorySectionLengthOverride `json:"section_length_override,omitempty"`
	Status                 *StoryStatus                `json:"status,omitempty"`
	Subject                *string                     `json:"subject"`
	TimePeriod             *string                     `json:"time_period"`
	Title                  *string                     `json:"title,omitempty"`
	Tone                   *string                     `json:"tone"`
	UpdatedAt              *time.Time                  `json:"updated_at,omitempty"`
	UserId                 *int64                      `json:"user_id,omitempty"`
}

// StorySectionLengthOverride defines model for Story.SectionLengthOverride.
type StorySectionLengthOverride string

// StoryStatus defines model for Story.Status.
type StoryStatus string

// StorySection defines model for StorySection.
type StorySection struct {
	Content        *string             `json:"content,omitempty"`
	GeneratedAt    *time.Time          `json:"generated_at,omitempty"`
	GenerationDate *openapi_types.Date `json:"generation_date,omitempty"`
	Id             *int64              `json:"id,omitempty"`
	LanguageLevel  *string             `json:"language_level,omitempty"`
	SectionNumber  *int                `json:"section_number,omitempty"`
	StoryId        *int64              `json:"story_id,omitempty"`
	WordCount      *int                `json:"word_count,omitempty"`
}

// StorySectionQuestion defines model for StorySectionQuestion.
type StorySectionQuestion struct {
	CorrectAnswerIndex *int       `json:"correct_answer_index,omitempty"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Explanation        *string    `json:"explanation"`
	Id                 *int64     `json:"id,omitempty"`
	Options            *[]string  `json:"options,omitempty"`
	QuestionText       *string    `json:"question_text,omitempty"`
	SectionId          *int64     `json:"section_id,omitempty"`
}

// StorySectionWithQuestions defines model for StorySectionWithQuestions.
type StorySectionWithQuestions struct {
	Content        *string                 `json:"content,omitempty"`
	GeneratedAt    *time.Time              `json:"generated_at,omitempty"`
	GenerationDate *openapi_types.Date     `json:"generation_date,omitempty"`
	Id             *int64                  `json:"id,omitempty"`
	LanguageLevel  *string                 `json:"language_level,omitempty"`
	Questions      *[]StorySectionQuestion `json:"questions,omitempty"`
	SectionNumber  *int                    `json:"section_number,omitempty"`
	StoryId        *int64                  `json:"story_id,omitempty"`
	WordCount      *int                    `json:"word_count,omitempty"`
}

// StoryWithSections defines model for StoryWithSections.
type StoryWithSections struct {
	AuthorStyle *string `json:"author_style"`

	// AutoGenerationPaused When true, the worker will skip automatic section generation for this story
	AutoGenerationPaused   *bool                                   `json:"auto_generation_paused,omitempty"`
	CharacterNames         *string                                 `json:"character_names"`
	CreatedAt              *time.Time                              `json:"created_at,omitempty"`
	CustomInstructions     *string                                 `json:"custom_instructions"`
	ExtraGenerationsToday  *int                                    `json:"extra_generations_today,omitempty"`
	Genre                  *string                                 `json:"genre"`
	Id                     *int64                                  `json:"id,omitempty"`
	Language               *string                                 `json:"language,omitempty"`
	LastSectionGeneratedAt *time.Time                              `json:"last_section_generated_at"`
	SectionLengthOverride  *StoryWithSectionsSectionLengthOverride `json:"section_length_override,omitempty"`
	Sections               *[]StorySection                         `json:"sections,omitempty"`
	Status                 *StoryWithSectionsStatus                `json:"status,omitempty"`
	Subject                *string                                 `json:"subject"`
	TimePeriod             *string                                 `json:"time_period"`
	Title                  *string                                 `json:"title,omitempty"`
	Tone                   *string                                 `json:"tone"`
	UpdatedAt              *time.Time                              `json:"updated_at,omitempty"`
	UserId                 *int64                                  `json:"user_id,omitempty"`
}

// StoryWithSectionsSectionLengthOverride defines model for StoryWithSections.SectionLengthOverride.
type StoryWithSectionsSectionLengthOverride string

// StoryWithSectionsStatus defines model for StoryWithSections.Status.
type StoryWithSectionsStatus string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
	Success bool    `json:"success"`
}

// SystemHealthAnalytics defines model for SystemHealthAnalytics.
type SystemHealthAnalytics struct {
	BackgroundJobs *map[string]interface{} `json:"backgroundJobs,omitempty"`
	Performance    *map[string]interface{} `json:"performance,omitempty"`
}

// TTSRequest defines model for TTSRequest.
type TTSRequest struct {
	// Input The text to convert to speech
	Input string `json:"input"`

	// Model The TTS model to use
	Model *string `json:"model,omitempty"`

	// StreamFormat The format for streaming audio data
	StreamFormat *TTSRequestStreamFormat `json:"stream_format,omitempty"`

	// Voice The voice to use for speech generation
	Voice *string `json:"voice,omitempty"`
}

// TTSRequestStreamFormat The format for streaming audio data
type TTSRequestStreamFormat string

// TTSResponse defines model for TTSResponse.
type TTSResponse struct {
	// Audio Base64 encoded audio chunk (for type=audio)
	Audio *string `json:"audio,omitempty"`

	// Error Error message (for type=error)
	Error *string `json:"error,omitempty"`

	// Type The type of SSE event
	Type *TTSResponseType `json:"type,omitempty"`

	// Usage Usage statistics (for type=usage)
	Usage *struct {
		// InputTokens Number of input tokens processed
		InputTokens *int `json:"input_tokens,omitempty"`

		// OutputTokens Number of output tokens generated
		OutputTokens *int `json:"output_tokens,omitempty"`

		// TotalTokens Total tokens used
		TotalTokens *int `json:"total_tokens,omitempty"`
	} `json:"usage,omitempty"`
}

// TTSResponseType The type of SSE event
type TTSResponseType string

// TestAIRequest defines model for TestAIRequest.
type TestAIRequest struct {
	// ApiKey API key for the provider. If not provided, the server will try to use a saved key.
	ApiKey *string `json:"api_key"`

	// Model AI model code (e.g., "llama3", "gpt-4")
	Model string `json:"model"`

	// Provider AI provider code (e.g., "ollama", "openai")
	Provider string `json:"provider"`
}

// ToggleAutoGenerationRequest defines model for ToggleAutoGenerationRequest.
type ToggleAutoGenerationRequest struct {
	// Paused Whether to pause (true) or resume (false) auto-generation
	Paused bool `json:"paused"`
}

// ToggleAutoGenerationResponse defines model for ToggleAutoGenerationResponse.
type ToggleAutoGenerationResponse struct {
	AutoGenerationPaused *bool   `json:"auto_generation_paused,omitempty"`
	Message              *string `json:"message,omitempty"`
}

// TranslateRequest defines model for TranslateRequest.
type TranslateRequest struct {
	// SourceLanguage Source language code (optional - will be auto-detected if not provided)
	SourceLanguage *string `json:"source_language,omitempty"`

	// TargetLanguage Target language code (e.g., 'en', 'es', 'fr')
	TargetLanguage string `json:"target_language"`

	// Text Text to translate
	Text string `json:"text"`
}

// TranslateResponse defines model for TranslateResponse.
type TranslateResponse struct {
	// Confidence Translation confidence score (if available from provider)
	Confidence *float32 `json:"confidence,omitempty"`

	// SourceLanguage Detected or provided source language code
	SourceLanguage string `json:"source_language"`

	// TargetLanguage Target language code that was requested
	TargetLanguage string `json:"target_language"`

	// TranslatedText The translated text
	TranslatedText string `json:"translated_text"`
}

// UpdateConversationRequest defines model for UpdateConversationRequest.
type UpdateConversationRequest struct {
	// Title New title for the conversation
	Title string `json:"title"`
}

// UpdateSnippetRequest defines model for UpdateSnippetRequest.
type UpdateSnippetRequest struct {
	// Context User-provided context or notes about this snippet
	Context *string `json:"context"`

	// OriginalText The original text/word to save
	OriginalText *string `json:"original_text,omitempty"`

	// SourceLanguage ISO language code of the source text
	SourceLanguage *string `json:"source_language,omitempty"`

	// TargetLanguage ISO language code of the target translation
	TargetLanguage *string `json:"target_language,omitempty"`

	// TranslatedText The translated text
	TranslatedText *string `json:"translated_text,omitempty"`
}

// UsageStatsResponse defines model for UsageStatsResponse.
type UsageStatsResponse struct {
	// CacheStats Cache performance statistics across all services
	CacheStats *struct {
		// CacheHitRate Cache hit rate as a percentage
		CacheHitRate *float32 `json:"cache_hit_rate,omitempty"`

		// TotalCacheHitsCharacters Total characters served from cache
		TotalCacheHitsCharacters *int `json:"total_cache_hits_characters,omitempty"`

		// TotalCacheHitsRequests Total number of cache hit requests
		TotalCacheHitsRequests *int `json:"total_cache_hits_requests,omitempty"`

		// TotalCacheMissesRequests Total number of cache miss requests
		TotalCacheMissesRequests *int `json:"total_cache_misses_requests,omitempty"`
	} `json:"cache_stats,omitempty"`

	// MonthlyTotals Monthly totals organized by month (YYYY-MM) and service
	MonthlyTotals map[string]map[string]struct {
		TotalCharacters *int `json:"total_characters,omitempty"`
		TotalRequests   *int `json:"total_requests,omitempty"`
	} `json:"monthly_totals"`

	// Services List of service names
	Services []string `json:"services"`

	// UsageStats Usage statistics organized by service, month (YYYY-MM), and usage type
	UsageStats map[string]map[string]struct {
		CharactersUsed *int `json:"characters_used,omitempty"`
		Quota          *int `json:"quota,omitempty"`
		RequestsMade   *int `json:"requests_made,omitempty"`
	} `json:"usage_stats"`
}

// User defines model for User.
type User struct {
	// AiEnabled Whether AI features are enabled for this user
	AiEnabled    *bool   `json:"ai_enabled"`
	AiModel      *string `json:"ai_model"`
	AiProvider   *string `json:"ai_provider"`
	CreatedAt    *string `json:"created_at,omitempty"`
	CurrentLevel *string `json:"current_level"`
	Email        *string `json:"email"`

	// HasApiKey Whether the user has a valid API key saved for their current AI provider
	HasApiKey *bool  `json:"has_api_key,omitempty"`
	Id        *int64 `json:"id,omitempty"`

	// IsPaused Whether the user is paused (question generation disabled)
	IsPaused          *bool   `json:"is_paused,omitempty"`
	LastActive        *string `json:"last_active"`
	PreferredLanguage *string `json:"preferred_language"`

	// Roles List of roles assigned to the user
	Roles    *[]Role `json:"roles,omitempty"`
	Timezone *string `json:"timezone"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username *string `json:"username,omitempty"`
}

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// AiEnabled Whether AI features are enabled for this user
	AiEnabled *bool `json:"ai_enabled,omitempty"`

	// CurrentLevel Current proficiency level
	CurrentLevel *string `json:"current_level,omitempty"`

	// Email Email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// Password Password (minimum 8 characters)
	Password string `json:"password"`

	// PreferredLanguage Preferred learning language
	PreferredLanguage *string `json:"preferred_language,omitempty"`

	// Timezone Timezone (e.g., "UTC", "America/New_York")
	Timezone *string `json:"timezone,omitempty"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username string `json:"username"`
}

// UserIdRequest defines model for UserIdRequest.
type UserIdRequest struct {
	// UserId ID of the user
	UserId int64 `json:"user_id"`
}

// UserLearningPreferences defines model for UserLearningPreferences.
type UserLearningPreferences struct {
	// DailyGoal User-configurable number of daily questions
	DailyGoal *int `json:"daily_goal,omitempty"`

	// DailyReminderEnabled Whether to receive daily reminder emails
	DailyReminderEnabled bool `json:"daily_reminder_enabled"`

	// FocusOnWeakAreas Whether to focus on weak areas
	FocusOnWeakAreas bool `json:"focus_on_weak_areas"`

	// FreshQuestionRatio Ratio of fresh (never seen) questions to show (0-1)
	FreshQuestionRatio float32 `json:"fresh_question_ratio"`

	// KnownQuestionPenalty Penalty multiplier for questions marked as known (0-1)
	KnownQuestionPenalty float32 `json:"known_question_penalty"`

	// ReviewIntervalDays Days between reviews of known questions
	ReviewIntervalDays int `json:"review_interval_days"`

	// TtsVoice Preferred TTS voice (e.g., it-IT-IsabellaNeural)
	TtsVoice *string `json:"tts_voice,omitempty"`

	// WeakAreaBoost Multiplier for weak area questions
	WeakAreaBoost float32 `json:"weak_area_boost"`
}

// UserPerformanceAnalytics defines model for UserPerformanceAnalytics.
type UserPerformanceAnalytics struct {
	LearningPreferences *map[string]interface{}   `json:"learningPreferences,omitempty"`
	WeakAreas           *[]map[string]interface{} `json:"weakAreas,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	// AiEnabled Whether AI features are enabled for this user
	AiEnabled    *bool   `json:"ai_enabled"`
	CreatedAt    *string `json:"created_at,omitempty"`
	CurrentLevel *string `json:"current_level,omitempty"`
	Email        *string `json:"email"`
	Id           *int64  `json:"id,omitempty"`

	// IsPaused Whether the user is paused (question generation disabled)
	IsPaused          *bool   `json:"is_paused,omitempty"`
	LastActive        *string `json:"last_active"`
	PreferredLanguage *string `json:"preferred_language"`
	Timezone          *string `json:"timezone"`
	UpdatedAt         *string `json:"updated_at,omitempty"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username *string `json:"username,omitempty"`
}

// UserProgress defines model for UserProgress.
type UserProgress struct {
	AccuracyRate   *float32 `json:"accuracy_rate,omitempty"`
	CorrectAnswers *int     `json:"correct_answers,omitempty"`

	// CurrentLevel Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6).
	CurrentLevel *Level `json:"current_level,omitempty"`

	// GapAnalysis Analysis of learning gaps and areas needing attention
	GapAnalysis     *map[string]interface{} `json:"gap_analysis,omitempty"`
	GenerationFocus *GenerationFocus        `json:"generation_focus,omitempty"`

	// HighPriorityTopics Topics that have high priority scores for the user
	HighPriorityTopics  *[]string                      `json:"high_priority_topics,omitempty"`
	LearningPreferences *UserLearningPreferences       `json:"learning_preferences,omitempty"`
	PerformanceByTopic  *map[string]PerformanceMetrics `json:"performance_by_topic,omitempty"`

	// PriorityDistribution Distribution of question priorities (high, medium, low counts)
	PriorityDistribution *map[string]int   `json:"priority_distribution,omitempty"`
	PriorityInsights     *PriorityInsights `json:"priority_insights,omitempty"`
	RecentActivity       *[]UserResponse   `json:"recent_activity,omitempty"`

	// SuggestedLevel Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6).
	SuggestedLevel *Level        `json:"suggested_level,omitempty"`
	TotalQuestions *int          `json:"total_questions,omitempty"`
	WeakAreas      *[]string     `json:"weak_areas,omitempty"`
	WorkerStatus   *WorkerStatus `json:"worker_status,omitempty"`
}

// UserQuestionStats defines model for UserQuestionStats.
type UserQuestionStats struct {
	AccuracyByLevel  *map[string]float32 `json:"accuracy_by_level,omitempty"`
	AccuracyByType   *map[string]float32 `json:"accuracy_by_type,omitempty"`
	AnsweredByLevel  *map[string]int     `json:"answered_by_level,omitempty"`
	AnsweredByType   *map[string]int     `json:"answered_by_type,omitempty"`
	AvailableByLevel *map[string]int     `json:"available_by_level,omitempty"`
	AvailableByType  *map[string]int     `json:"available_by_type,omitempty"`
	TotalAnswered    *int                `json:"total_answered,omitempty"`
	UserId           *int64              `json:"user_id,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	CreatedAt  *string `json:"created_at,omitempty"`
	IsCorrect  *bool   `json:"is_correct,omitempty"`
	QuestionId *int64  `json:"question_id,omitempty"`
}

// UserSettings defines model for UserSettings.
type UserSettings struct {
	// AiEnabled Whether AI features are enabled for this user
	AiEnabled  *bool   `json:"ai_enabled,omitempty"`
	AiModel    *string `json:"ai_model,omitempty"`
	AiProvider *string `json:"ai_provider,omitempty"`

	// ApiKey API key for AI provider (write-only)
	ApiKey *string `json:"api_key,omitempty"`

	// Language Learning language (dynamic). Allowed values come from config.yaml language_levels keys.
	Language *Language `json:"language,omitempty"`

	// Level Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6).
	Level *Level `json:"level,omitempty"`
	union json.RawMessage
}

// UserSettings0 defines model for .
type UserSettings0 = interface{}

// UserSettings1 defines model for .
type UserSettings1 = interface{}

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	// AiEnabled Whether AI features are enabled for this user
	AiEnabled *bool `json:"ai_enabled,omitempty"`

	// AiModel AI model code
	AiModel *string `json:"ai_model,omitempty"`

	// AiProvider AI provider code
	AiProvider *string `json:"ai_provider,omitempty"`

	// ApiKey API key for AI provider (write-only)
	ApiKey *string `json:"api_key,omitempty"`

	// CurrentLevel Current proficiency level
	CurrentLevel *string `json:"current_level,omitempty"`

	// Email Email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// PreferredLanguage Preferred learning language
	PreferredLanguage *string `json:"preferred_language,omitempty"`

	// SelectedRoles Array of role names to assign to the user
	SelectedRoles *[]string `json:"selectedRoles,omitempty"`

	// Timezone Timezone (e.g., "UTC", "America/New_York")
	Timezone *string `json:"timezone,omitempty"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username *string `json:"username,omitempty"`
	union    json.RawMessage
}

// UserUpdateRequest0 defines model for .
type UserUpdateRequest0 = interface{}

// UserUpdateRequest1 defines model for .
type UserUpdateRequest1 = interface{}

// UserUsageStats defines model for UserUsageStats.
type UserUsageStats struct {
	ApiKeyId         *int64              `json:"api_key_id,omitempty"`
	CompletionTokens *int                `json:"completion_tokens,omitempty"`
	CreatedAt        *string             `json:"created_at,omitempty"`
	Id               *int64              `json:"id,omitempty"`
	Model            *string             `json:"model,omitempty"`
	PromptTokens     *int                `json:"prompt_tokens,omitempty"`
	Provider         *string             `json:"provider,omitempty"`
	RequestsMade     *int                `json:"requests_made,omitempty"`
	ServiceName      *string             `json:"service_name,omitempty"`
	TotalTokens      *int                `json:"total_tokens,omitempty"`
	UpdatedAt        *string             `json:"updated_at,omitempty"`
	UsageDate        *openapi_types.Date `json:"usage_date,omitempty"`
	UsageHour        *int                `json:"usage_hour,omitempty"`
	UsageType        *string             `json:"usage_type,omitempty"`
	UserId           *int64              `json:"user_id,omitempty"`
}

// UserUsageStatsDaily defines model for UserUsageStatsDaily.
type UserUsageStatsDaily struct {
	Model                 *string             `json:"model,omitempty"`
	Provider              *string             `json:"provider,omitempty"`
	ServiceName           *string             `json:"service_name,omitempty"`
	TotalCompletionTokens *int                `json:"total_completion_tokens,omitempty"`
	TotalPromptTokens     *int                `json:"total_prompt_tokens,omitempty"`
	TotalRequests         *int                `json:"total_requests,omitempty"`
	TotalTokens           *int                `json:"total_tokens,omitempty"`
	UsageDate             *openapi_types.Date `json:"usage_date,omitempty"`
	UsageType             *string             `json:"usage_type,omitempty"`
}

// UserUsageStatsHourly defines model for UserUsageStatsHourly.
type UserUsageStatsHourly struct {
	Model                 *string `json:"model,omitempty"`
	Provider              *string `json:"provider,omitempty"`
	ServiceName           *string `json:"service_name,omitempty"`
	TotalCompletionTokens *int    `json:"total_completion_tokens,omitempty"`
	TotalPromptTokens     *int    `json:"total_prompt_tokens,omitempty"`
	TotalRequests         *int    `json:"total_requests,omitempty"`
	TotalTokens           *int    `json:"total_tokens,omitempty"`
	UsageHour             *int    `json:"usage_hour,omitempty"`
	UsageType             *string `json:"usage_type,omitempty"`
}

// WordOfTheDayDisplay defines model for WordOfTheDayDisplay.
type WordOfTheDayDisplay struct {
	// Context Additional context for the word (primarily for snippets)
	Context *string `json:"context"`

	// Date Date for the word of the day (YYYY-MM-DD)
	Date openapi_types.Date `json:"date"`

	// Explanation Explanation of the word meaning or usage
	Explanation *string `json:"explanation"`

	// Language Source language of the word
	Language string `json:"language"`

	// Level CEFR difficulty level
	Level *string `json:"level"`

	// Sentence Example sentence using the word in context
	Sentence string `json:"sentence"`

	// SourceId ID of the source (question ID or snippet ID)
	SourceId int64 `json:"source_id"`

	// SourceType Source type of the word (from vocabulary question or user snippet)
	SourceType WordOfTheDayDisplaySourceType `json:"source_type"`

	// TopicCategory Topic category for the word
	TopicCategory *string `json:"topic_category"`

	// Translation English translation of the word
	Translation string `json:"translation"`

	// Word The word or phrase being featured
	Word string `json:"word"`
}

// WordOfTheDayDisplaySourceType Source type of the word (from vocabulary question or user snippet)
type WordOfTheDayDisplaySourceType string

// WorkerHealth defines model for WorkerHealth.
type WorkerHealth struct {
	GlobalPaused    *bool `json:"global_paused,omitempty"`
	HealthyCount    *int  `json:"healthy_count,omitempty"`
	TotalCount      *int  `json:"total_count,omitempty"`
	WorkerInstances *[]struct {
		Healthy       *bool `json:"healthy,omitempty"`
		IsPaused      *bool `json:"is_paused,omitempty"`
		IsRunning     *bool `json:"is_running,omitempty"`
		LastHeartbeat *struct {
			Time  *string `json:"Time,omitempty"`
			Valid *bool   `json:"Valid,omitempty"`
		} `json:"last_heartbeat,omitempty"`
		TotalQuestionsGenerated *int    `json:"total_questions_generated,omitempty"`
		TotalRuns               *int    `json:"total_runs,omitempty"`
		WorkerInstance          *string `json:"worker_instance,omitempty"`
	} `json:"worker_instances,omitempty"`
}

// WorkerStatus defines model for WorkerStatus.
type WorkerStatus struct {
	// ErrorMessage Error message if the worker is in an error state
	ErrorMessage *string `json:"error_message"`

	// LastHeartbeat Timestamp of the last heartbeat from the worker
	LastHeartbeat *string `json:"last_heartbeat,omitempty"`

	// Status Current status of the worker
	Status *WorkerStatusStatus `json:"status,omitempty"`
}

// WorkerStatusStatus Current status of the worker
type WorkerStatusStatus string

// WorkerStatusResponse defines model for WorkerStatusResponse.
type WorkerStatusResponse struct {
	// ErrorMessage Error message if worker has errors
	ErrorMessage string `json:"error_message"`

	// GlobalPaused Whether the worker is globally paused
	GlobalPaused bool `json:"global_paused"`

	// HasErrors Whether the worker has encountered errors
	HasErrors bool `json:"has_errors"`

	// HealthyWorkers Number of healthy worker instances
	HealthyWorkers int `json:"healthy_workers"`

	// LastErrorDetails Detailed error information if any
	LastErrorDetails string `json:"last_error_details"`

	// TotalWorkers Total number of worker instances
	TotalWorkers int `json:"total_workers"`

	// UserPaused Whether the user's question generation is paused
	UserPaused bool `json:"user_paused"`

	// WorkerRunning Whether the worker is currently running
	WorkerRunning bool `json:"worker_running"`
}

// DeleteV1AdminBackendFeedbackParams defines parameters for DeleteV1AdminBackendFeedback.
type DeleteV1AdminBackendFeedbackParams struct {
	// Status Status of feedback reports to delete
	Status DeleteV1AdminBackendFeedbackParamsStatus `form:"status" json:"status"`
}

// DeleteV1AdminBackendFeedbackParamsStatus defines parameters for DeleteV1AdminBackendFeedback.
type DeleteV1AdminBackendFeedbackParamsStatus string

// GetV1AdminBackendFeedbackParams defines parameters for GetV1AdminBackendFeedback.
type GetV1AdminBackendFeedbackParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Status Filter by status
	Status *GetV1AdminBackendFeedbackParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// FeedbackType Filter by feedback type
	FeedbackType *string `form:"feedback_type,omitempty" json:"feedback_type,omitempty"`

	// UserId Filter by user ID
	UserId *int `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetV1AdminBackendFeedbackParamsStatus defines parameters for GetV1AdminBackendFeedback.
type GetV1AdminBackendFeedbackParamsStatus string

// GetV1AdminBackendQuestionsParams defines parameters for GetV1AdminBackendQuestions.
type GetV1AdminBackendQuestionsParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of questions per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search Search term for question content
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type Filter by question type
	Type *QuestionType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by question status
	Status *QuestionStatus `form:"status,omitempty" json:"status,omitempty"`

	// Language Filter by language
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Level Filter by level
	Level *Level `form:"level,omitempty" json:"level,omitempty"`

	// UserId Filter by user ID (optional)
	UserId *int64 `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetV1AdminBackendQuestionsPaginatedParams defines parameters for GetV1AdminBackendQuestionsPaginated.
type GetV1AdminBackendQuestionsPaginatedParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of questions per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search Search term for question content
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type Filter by question type
	Type *QuestionType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by question status
	Status *QuestionStatus `form:"status,omitempty" json:"status,omitempty"`

	// Language Filter by language
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Level Filter by level
	Level *Level `form:"level,omitempty" json:"level,omitempty"`

	// UserId Filter by user ID (optional)
	UserId *int64 `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// PutV1AdminBackendQuestionsIdJSONBody defines parameters for PutV1AdminBackendQuestionsId.
type PutV1AdminBackendQuestionsIdJSONBody struct {
	// Content Updated question content
	Content map[string]interface{} `json:"content"`

	// CorrectAnswer Index of the correct answer
	CorrectAnswer *int `json:"correct_answer,omitempty"`

	// Explanation Explanation for the correct answer
	Explanation string `json:"explanation"`
}

// PostV1AdminBackendQuestionsIdAiFixJSONBody defines parameters for PostV1AdminBackendQuestionsIdAiFix.
type PostV1AdminBackendQuestionsIdAiFixJSONBody struct {
	AdditionalContext *string `json:"additional_context,omitempty"`
}

// PostV1AdminBackendQuestionsIdAssignUsersJSONBody defines parameters for PostV1AdminBackendQuestionsIdAssignUsers.
type PostV1AdminBackendQuestionsIdAssignUsersJSONBody struct {
	// UserIds Array of user IDs to assign to the question
	UserIds []int64 `json:"user_ids"`
}

// PostV1AdminBackendQuestionsIdUnassignUsersJSONBody defines parameters for PostV1AdminBackendQuestionsIdUnassignUsers.
type PostV1AdminBackendQuestionsIdUnassignUsersJSONBody struct {
	// UserIds Array of user IDs to unassign from the question
	UserIds []int64 `json:"user_ids"`
}

// GetV1AdminBackendReportedQuestionsParams defines parameters for GetV1AdminBackendReportedQuestions.
type GetV1AdminBackendReportedQuestionsParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of questions per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search Search term for question content
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type Filter by question type
	Type *QuestionType `form:"type,omitempty" json:"type,omitempty"`

	// Language Filter by language
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Level Filter by level
	Level *Level `form:"level,omitempty" json:"level,omitempty"`
}

// GetV1AdminBackendStoriesParams defines parameters for GetV1AdminBackendStories.
type GetV1AdminBackendStoriesParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of stories per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search Search term for story title
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Language Filter by language
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Status Filter by story status
	Status *StoryStatus `form:"status,omitempty" json:"status,omitempty"`

	// UserId Filter by user ID (optional)
	UserId *int64 `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// PostV1AdminBackendUserzJSONBody defines parameters for PostV1AdminBackendUserz.
type PostV1AdminBackendUserzJSONBody struct {
	// AiEnabled Whether AI is enabled for this user
	AiEnabled *bool `json:"ai_enabled,omitempty"`

	// AiModel AI model preference
	AiModel *string `json:"ai_model,omitempty"`

	// AiProvider AI provider preference
	AiProvider *string `json:"ai_provider,omitempty"`

	// Email Email address for the new user
	Email openapi_types.Email `json:"email"`

	// Language Preferred language for the user
	Language *string `json:"language,omitempty"`

	// Level Current level for the user
	Level *string `json:"level,omitempty"`

	// Password Password for the new user
	Password string `json:"password"`

	// Username Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
	Username string `json:"username"`
}

// GetV1AdminBackendUserzPaginatedParams defines parameters for GetV1AdminBackendUserzPaginated.
type GetV1AdminBackendUserzPaginatedParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of users per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search Search term for username or email
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Language Filter by preferred language
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Level Filter by current level
	Level *Level `form:"level,omitempty" json:"level,omitempty"`

	// AiProvider Filter by AI provider
	AiProvider *string `form:"ai_provider,omitempty" json:"ai_provider,omitempty"`

	// AiModel Filter by AI model
	AiModel *string `form:"ai_model,omitempty" json:"ai_model,omitempty"`

	// AiEnabled Filter by AI enabled status
	AiEnabled *GetV1AdminBackendUserzPaginatedParamsAiEnabled `form:"ai_enabled,omitempty" json:"ai_enabled,omitempty"`

	// Active Filter by active status (active within 7 days)
	Active *GetV1AdminBackendUserzPaginatedParamsActive `form:"active,omitempty" json:"active,omitempty"`
}

// GetV1AdminBackendUserzPaginatedParamsAiEnabled defines parameters for GetV1AdminBackendUserzPaginated.
type GetV1AdminBackendUserzPaginatedParamsAiEnabled string

// GetV1AdminBackendUserzPaginatedParamsActive defines parameters for GetV1AdminBackendUserzPaginated.
type GetV1AdminBackendUserzPaginatedParamsActive string

// PostV1AdminBackendUserzIdRolesJSONBody defines parameters for PostV1AdminBackendUserzIdRoles.
type PostV1AdminBackendUserzIdRolesJSONBody struct {
	// RoleId Role ID to assign
	RoleId int64 `json:"role_id"`
}

// GetV1AdminWorkerNotificationsErrorsParams defines parameters for GetV1AdminWorkerNotificationsErrors.
type GetV1AdminWorkerNotificationsErrorsParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of errors per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// ErrorType Filter by error type
	ErrorType *GetV1AdminWorkerNotificationsErrorsParamsErrorType `form:"error_type,omitempty" json:"error_type,omitempty"`

	// NotificationType Filter by notification type
	NotificationType *GetV1AdminWorkerNotificationsErrorsParamsNotificationType `form:"notification_type,omitempty" json:"notification_type,omitempty"`

	// Resolved Filter by resolution status
	Resolved *GetV1AdminWorkerNotificationsErrorsParamsResolved `form:"resolved,omitempty" json:"resolved,omitempty"`
}

// GetV1AdminWorkerNotificationsErrorsParamsErrorType defines parameters for GetV1AdminWorkerNotificationsErrors.
type GetV1AdminWorkerNotificationsErrorsParamsErrorType string

// GetV1AdminWorkerNotificationsErrorsParamsNotificationType defines parameters for GetV1AdminWorkerNotificationsErrors.
type GetV1AdminWorkerNotificationsErrorsParamsNotificationType string

// GetV1AdminWorkerNotificationsErrorsParamsResolved defines parameters for GetV1AdminWorkerNotificationsErrors.
type GetV1AdminWorkerNotificationsErrorsParamsResolved string

// PostV1AdminWorkerNotificationsForceSendJSONBody defines parameters for PostV1AdminWorkerNotificationsForceSend.
type PostV1AdminWorkerNotificationsForceSendJSONBody struct {
	// Username Username of the user to send notification to
	Username string `json:"username"`
}

// GetV1AdminWorkerNotificationsSentParams defines parameters for GetV1AdminWorkerNotificationsSent.
type GetV1AdminWorkerNotificationsSentParams struct {
	// Page Page number (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of notifications per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// NotificationType Filter by notification type
	NotificationType *GetV1AdminWorkerNotificationsSentParamsNotificationType `form:"notification_type,omitempty" json:"notification_type,omitempty"`

	// Status Filter by status
	Status *GetV1AdminWorkerNotificationsSentParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// SentAfter Filter notifications sent after this timestamp
	SentAfter *string `form:"sent_after,omitempty" json:"sent_after,omitempty"`

	// SentBefore Filter notifications sent before this timestamp
	SentBefore *string `form:"sent_before,omitempty" json:"sent_before,omitempty"`
}

// GetV1AdminWorkerNotificationsSentParamsNotificationType defines parameters for GetV1AdminWorkerNotificationsSent.
type GetV1AdminWorkerNotificationsSentParamsNotificationType string

// GetV1AdminWorkerNotificationsSentParamsStatus defines parameters for GetV1AdminWorkerNotificationsSent.
type GetV1AdminWorkerNotificationsSentParamsStatus string

// GetV1AiBookmarksParams defines parameters for GetV1AiBookmarks.
type GetV1AiBookmarksParams struct {
	// Q Optional search query to filter bookmarked messages
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Limit Maximum number of messages to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of messages to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetV1AiConversationsParams defines parameters for GetV1AiConversations.
type GetV1AiConversationsParams struct {
	// Limit Maximum number of conversations to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of conversations to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PutV1AiConversationsBookmarkJSONBody defines parameters for PutV1AiConversationsBookmark.
type PutV1AiConversationsBookmarkJSONBody struct {
	// ConversationId ID of the conversation containing the message
	ConversationId openapi_types.UUID `json:"conversation_id"`

	// MessageId ID of the message to bookmark/unbookmark
	MessageId openapi_types.UUID `json:"message_id"`
}

// GetV1AiSearchParams defines parameters for GetV1AiSearch.
type GetV1AiSearchParams struct {
	// Q Search query string
	Q string `form:"q" json:"q"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostV1ApiKeysJSONBody defines parameters for PostV1ApiKeys.
type PostV1ApiKeysJSONBody struct {
	// KeyName A descriptive name for the API key
	KeyName string `json:"key_name"`

	// PermissionLevel Permission level: 'readonly' for GET requests only, 'full' for all operations
	PermissionLevel PostV1ApiKeysJSONBodyPermissionLevel `json:"permission_level"`
}

// PostV1ApiKeysJSONBodyPermissionLevel defines parameters for PostV1ApiKeys.
type PostV1ApiKeysJSONBodyPermissionLevel string

// GetV1AuthGoogleCallbackParams defines parameters for GetV1AuthGoogleCallback.
type GetV1AuthGoogleCallbackParams struct {
	// Code Authorization code from Google
	Code string `form:"code" json:"code"`

	// State State parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// PostV1DailyQuestionsDateAnswerQuestionIdJSONBody defines parameters for PostV1DailyQuestionsDateAnswerQuestionId.
type PostV1DailyQuestionsDateAnswerQuestionIdJSONBody struct {
	// UserAnswerIndex Index of the user's selected answer (0-based)
	UserAnswerIndex int `json:"user_answer_index"`
}

// GetV1QuizAiTokenUsageParams defines parameters for GetV1QuizAiTokenUsage.
type GetV1QuizAiTokenUsageParams struct {
	// StartDate Start date in YYYY-MM-DD format
	StartDate openapi_types.Date `form:"startDate" json:"startDate"`

	// EndDate End date in YYYY-MM-DD format
	EndDate openapi_types.Date `form:"endDate" json:"endDate"`
}

// GetV1QuizAiTokenUsageDailyParams defines parameters for GetV1QuizAiTokenUsageDaily.
type GetV1QuizAiTokenUsageDailyParams struct {
	// StartDate Start date in YYYY-MM-DD format
	StartDate openapi_types.Date `form:"startDate" json:"startDate"`

	// EndDate End date in YYYY-MM-DD format
	EndDate openapi_types.Date `form:"endDate" json:"endDate"`
}

// GetV1QuizAiTokenUsageHourlyParams defines parameters for GetV1QuizAiTokenUsageHourly.
type GetV1QuizAiTokenUsageHourlyParams struct {
	// Date Date in YYYY-MM-DD format
	Date openapi_types.Date `form:"date" json:"date"`
}

// GetV1QuizQuestionParams defines parameters for GetV1QuizQuestion.
type GetV1QuizQuestionParams struct {
	// Language Preferred language for the question
	Language *Language `form:"language,omitempty" json:"language,omitempty"`

	// Level Difficulty level for the question
	Level *Level `form:"level,omitempty" json:"level,omitempty"`

	// Type Specific question type(s) to retrieve (comma-separated list). If multiple types are provided, the first valid type will be used.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// ExcludeType Question type(s) to exclude from random selection (comma-separated list). Useful for filtering out specific question types from the general quiz.
	ExcludeType *string `form:"exclude_type,omitempty" json:"exclude_type,omitempty"`
}

// GetV1SettingsLevelsParams defines parameters for GetV1SettingsLevels.
type GetV1SettingsLevelsParams struct {
	// Language Language to get levels for (optional - returns all levels if not specified)
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// GetV1SnippetsParams defines parameters for GetV1Snippets.
type GetV1SnippetsParams struct {
	// Q Optional search query to filter snippets by text content
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// SourceLang Filter by source language
	SourceLang *string `form:"source_lang,omitempty" json:"source_lang,omitempty"`

	// TargetLang Filter by target language
	TargetLang *string `form:"target_lang,omitempty" json:"target_lang,omitempty"`

	// StoryId Filter by story ID
	StoryId *int64 `form:"story_id,omitempty" json:"story_id,omitempty"`

	// Level Filter by difficulty level (CEFR level)
	Level *GetV1SnippetsParamsLevel `form:"level,omitempty" json:"level,omitempty"`

	// Limit Maximum number of snippets to return (default 50, max 100)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of snippets to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetV1SnippetsParamsLevel defines parameters for GetV1Snippets.
type GetV1SnippetsParamsLevel string

// GetV1SnippetsSearchParams defines parameters for GetV1SnippetsSearch.
type GetV1SnippetsSearchParams struct {
	// Q Search query string
	Q string `form:"q" json:"q"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetV1StoryParams defines parameters for GetV1Story.
type GetV1StoryParams struct {
	// IncludeArchived Include archived stories in the response
	IncludeArchived *bool `form:"include_archived,omitempty" json:"include_archived,omitempty"`
}

// GetV1WordOfDayHistoryParams defines parameters for GetV1WordOfDayHistory.
type GetV1WordOfDayHistoryParams struct {
	// StartDate Start date in YYYY-MM-DD format
	StartDate openapi_types.Date `form:"start_date" json:"start_date"`

	// EndDate End date in YYYY-MM-DD format
	EndDate openapi_types.Date `form:"end_date" json:"end_date"`
}

// GetV1WordOfDayDateEmbedParams defines parameters for GetV1WordOfDayDateEmbed.
type GetV1WordOfDayDateEmbedParams struct {
	// UserId User ID for which to retrieve the word
	UserId int `form:"user_id" json:"user_id"`
}

// PatchV1AdminBackendFeedbackIdJSONRequestBody defines body for PatchV1AdminBackendFeedbackId for application/json ContentType.
type PatchV1AdminBackendFeedbackIdJSONRequestBody = FeedbackUpdateRequest

// PutV1AdminBackendQuestionsIdJSONRequestBody defines body for PutV1AdminBackendQuestionsId for application/json ContentType.
type PutV1AdminBackendQuestionsIdJSONRequestBody PutV1AdminBackendQuestionsIdJSONBody

// PostV1AdminBackendQuestionsIdAiFixJSONRequestBody defines body for PostV1AdminBackendQuestionsIdAiFix for application/json ContentType.
type PostV1AdminBackendQuestionsIdAiFixJSONRequestBody PostV1AdminBackendQuestionsIdAiFixJSONBody

// PostV1AdminBackendQuestionsIdAssignUsersJSONRequestBody defines body for PostV1AdminBackendQuestionsIdAssignUsers for application/json ContentType.
type PostV1AdminBackendQuestionsIdAssignUsersJSONRequestBody PostV1AdminBackendQuestionsIdAssignUsersJSONBody

// PostV1AdminBackendQuestionsIdUnassignUsersJSONRequestBody defines body for PostV1AdminBackendQuestionsIdUnassignUsers for application/json ContentType.
type PostV1AdminBackendQuestionsIdUnassignUsersJSONRequestBody PostV1AdminBackendQuestionsIdUnassignUsersJSONBody

// PostV1AdminBackendUserzJSONRequestBody defines body for PostV1AdminBackendUserz for application/json ContentType.
type PostV1AdminBackendUserzJSONRequestBody PostV1AdminBackendUserzJSONBody

// PutV1AdminBackendUserzIdJSONRequestBody defines body for PutV1AdminBackendUserzId for application/json ContentType.
type PutV1AdminBackendUserzIdJSONRequestBody = UserUpdateRequest

// PostV1AdminBackendUserzIdResetPasswordJSONRequestBody defines body for PostV1AdminBackendUserzIdResetPassword for application/json ContentType.
type PostV1AdminBackendUserzIdResetPasswordJSONRequestBody = PasswordResetRequest

// PostV1AdminBackendUserzIdRolesJSONRequestBody defines body for PostV1AdminBackendUserzIdRoles for application/json ContentType.
type PostV1AdminBackendUserzIdRolesJSONRequestBody PostV1AdminBackendUserzIdRolesJSONBody

// PostV1AdminWorkerNotificationsForceSendJSONRequestBody defines body for PostV1AdminWorkerNotificationsForceSend for application/json ContentType.
type PostV1AdminWorkerNotificationsForceSendJSONRequestBody PostV1AdminWorkerNotificationsForceSendJSONBody

// PostV1AdminWorkerUsersPauseJSONRequestBody defines body for PostV1AdminWorkerUsersPause for application/json ContentType.
type PostV1AdminWorkerUsersPauseJSONRequestBody = UserIdRequest

// PostV1AdminWorkerUsersResumeJSONRequestBody defines body for PostV1AdminWorkerUsersResume for application/json ContentType.
type PostV1AdminWorkerUsersResumeJSONRequestBody = UserIdRequest

// PostV1AiConversationsJSONRequestBody defines body for PostV1AiConversations for application/json ContentType.
type PostV1AiConversationsJSONRequestBody = CreateConversationRequest

// PutV1AiConversationsBookmarkJSONRequestBody defines body for PutV1AiConversationsBookmark for application/json ContentType.
type PutV1AiConversationsBookmarkJSONRequestBody PutV1AiConversationsBookmarkJSONBody

// PostV1AiConversationsConversationIdMessagesJSONRequestBody defines body for PostV1AiConversationsConversationIdMessages for application/json ContentType.
type PostV1AiConversationsConversationIdMessagesJSONRequestBody = CreateMessageRequest

// PutV1AiConversationsIdJSONRequestBody defines body for PutV1AiConversationsId for application/json ContentType.
type PutV1AiConversationsIdJSONRequestBody = UpdateConversationRequest

// PostV1ApiKeysJSONRequestBody defines body for PostV1ApiKeys for application/json ContentType.
type PostV1ApiKeysJSONRequestBody PostV1ApiKeysJSONBody

// PostV1AudioSpeechJSONRequestBody defines body for PostV1AudioSpeech for application/json ContentType.
type PostV1AudioSpeechJSONRequestBody = TTSRequest

// PostV1AuthLoginJSONRequestBody defines body for PostV1AuthLogin for application/json ContentType.
type PostV1AuthLoginJSONRequestBody = LoginRequest

// PostV1AuthSignupJSONRequestBody defines body for PostV1AuthSignup for application/json ContentType.
type PostV1AuthSignupJSONRequestBody = UserCreateRequest

// PostV1DailyQuestionsDateAnswerQuestionIdJSONRequestBody defines body for PostV1DailyQuestionsDateAnswerQuestionId for application/json ContentType.
type PostV1DailyQuestionsDateAnswerQuestionIdJSONRequestBody PostV1DailyQuestionsDateAnswerQuestionIdJSONBody

// PostV1FeedbackJSONRequestBody defines body for PostV1Feedback for application/json ContentType.
type PostV1FeedbackJSONRequestBody = FeedbackSubmissionRequest

// PutV1PreferencesLearningJSONRequestBody defines body for PutV1PreferencesLearning for application/json ContentType.
type PutV1PreferencesLearningJSONRequestBody = UserLearningPreferences

// PostV1QuizAnswerJSONRequestBody defines body for PostV1QuizAnswer for application/json ContentType.
type PostV1QuizAnswerJSONRequestBody = AnswerRequest

// PostV1QuizChatStreamJSONRequestBody defines body for PostV1QuizChatStream for application/json ContentType.
type PostV1QuizChatStreamJSONRequestBody = QuizChatRequest

// PostV1QuizQuestionIdMarkKnownJSONRequestBody defines body for PostV1QuizQuestionIdMarkKnown for application/json ContentType.
type PostV1QuizQuestionIdMarkKnownJSONRequestBody = MarkQuestionKnownRequest

// PostV1QuizQuestionIdReportJSONRequestBody defines body for PostV1QuizQuestionIdReport for application/json ContentType.
type PostV1QuizQuestionIdReportJSONRequestBody = ReportQuestionRequest

// PutV1SettingsJSONRequestBody defines body for PutV1Settings for application/json ContentType.
type PutV1SettingsJSONRequestBody = UserSettings

// PostV1SettingsTestAiJSONRequestBody defines body for PostV1SettingsTestAi for application/json ContentType.
type PostV1SettingsTestAiJSONRequestBody = TestAIRequest

// PostV1SnippetsJSONRequestBody defines body for PostV1Snippets for application/json ContentType.
type PostV1SnippetsJSONRequestBody = CreateSnippetRequest

// PutV1SnippetsIdJSONRequestBody defines body for PutV1SnippetsId for application/json ContentType.
type PutV1SnippetsIdJSONRequestBody = UpdateSnippetRequest

// PostV1StoryJSONRequestBody defines body for PostV1Story for application/json ContentType.
type PostV1StoryJSONRequestBody = CreateStoryRequest

// PostV1StoryIdGenerateJSONRequestBody defines body for PostV1StoryIdGenerate for application/json ContentType.
type PostV1StoryIdGenerateJSONRequestBody = EmptyRequest

// PostV1StoryIdToggleAutoGenerationJSONRequestBody defines body for PostV1StoryIdToggleAutoGeneration for application/json ContentType.
type PostV1StoryIdToggleAutoGenerationJSONRequestBody = ToggleAutoGenerationRequest

// PostV1TranslateJSONRequestBody defines body for PostV1Translate for application/json ContentType.
type PostV1TranslateJSONRequestBody = TranslateRequest

// PutV1UserzProfileJSONRequestBody defines body for PutV1UserzProfile for application/json ContentType.
type PutV1UserzProfileJSONRequestBody = UserUpdateRequest

// AsServiceVersion returns the union data inside the AggregatedVersion_Worker as a ServiceVersion
func (t AggregatedVersion_Worker) AsServiceVersion() (ServiceVersion, error) {
	var body ServiceVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceVersion overwrites any union data inside the AggregatedVersion_Worker as the provided ServiceVersion
func (t *AggregatedVersion_Worker) FromServiceVersion(v ServiceVersion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceVersion performs a merge with any union data inside the AggregatedVersion_Worker, using the provided ServiceVersion
func (t *AggregatedVersion_Worker) MergeServiceVersion(v ServiceVersion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAggregatedVersionWorker1 returns the union data inside the AggregatedVersion_Worker as a AggregatedVersionWorker1
func (t AggregatedVersion_Worker) AsAggregatedVersionWorker1() (AggregatedVersionWorker1, error) {
	var body AggregatedVersionWorker1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAggregatedVersionWorker1 overwrites any union data inside the AggregatedVersion_Worker as the provided AggregatedVersionWorker1
func (t *AggregatedVersion_Worker) FromAggregatedVersionWorker1(v AggregatedVersionWorker1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAggregatedVersionWorker1 performs a merge with any union data inside the AggregatedVersion_Worker, using the provided AggregatedVersionWorker1
func (t *AggregatedVersion_Worker) MergeAggregatedVersionWorker1(v AggregatedVersionWorker1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AggregatedVersion_Worker) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AggregatedVersion_Worker) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserSettings0 returns the union data inside the UserSettings as a UserSettings0
func (t UserSettings) AsUserSettings0() (UserSettings0, error) {
	var body UserSettings0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSettings0 overwrites any union data inside the UserSettings as the provided UserSettings0
func (t *UserSettings) FromUserSettings0(v UserSettings0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSettings0 performs a merge with any union data inside the UserSettings, using the provided UserSettings0
func (t *UserSettings) MergeUserSettings0(v UserSettings0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSettings1 returns the union data inside the UserSettings as a UserSettings1
func (t UserSettings) AsUserSettings1() (UserSettings1, error) {
	var body UserSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSettings1 overwrites any union data inside the UserSettings as the provided UserSettings1
func (t *UserSettings) FromUserSettings1(v UserSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSettings1 performs a merge with any union data inside the UserSettings, using the provided UserSettings1
func (t *UserSettings) MergeUserSettings1(v UserSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UserSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AiEnabled != nil {
		object["ai_enabled"], err = json.Marshal(t.AiEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_enabled': %w", err)
		}
	}

	if t.AiModel != nil {
		object["ai_model"], err = json.Marshal(t.AiModel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_model': %w", err)
		}
	}

	if t.AiProvider != nil {
		object["ai_provider"], err = json.Marshal(t.AiProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_provider': %w", err)
		}
	}

	if t.ApiKey != nil {
		object["api_key"], err = json.Marshal(t.ApiKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'api_key': %w", err)
		}
	}

	if t.Language != nil {
		object["language"], err = json.Marshal(t.Language)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'language': %w", err)
		}
	}

	if t.Level != nil {
		object["level"], err = json.Marshal(t.Level)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'level': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UserSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ai_enabled"]; found {
		err = json.Unmarshal(raw, &t.AiEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'ai_enabled': %w", err)
		}
	}

	if raw, found := object["ai_model"]; found {
		err = json.Unmarshal(raw, &t.AiModel)
		if err != nil {
			return fmt.Errorf("error reading 'ai_model': %w", err)
		}
	}

	if raw, found := object["ai_provider"]; found {
		err = json.Unmarshal(raw, &t.AiProvider)
		if err != nil {
			return fmt.Errorf("error reading 'ai_provider': %w", err)
		}
	}

	if raw, found := object["api_key"]; found {
		err = json.Unmarshal(raw, &t.ApiKey)
		if err != nil {
			return fmt.Errorf("error reading 'api_key': %w", err)
		}
	}

	if raw, found := object["language"]; found {
		err = json.Unmarshal(raw, &t.Language)
		if err != nil {
			return fmt.Errorf("error reading 'language': %w", err)
		}
	}

	if raw, found := object["level"]; found {
		err = json.Unmarshal(raw, &t.Level)
		if err != nil {
			return fmt.Errorf("error reading 'level': %w", err)
		}
	}

	return err
}

// AsUserUpdateRequest0 returns the union data inside the UserUpdateRequest as a UserUpdateRequest0
func (t UserUpdateRequest) AsUserUpdateRequest0() (UserUpdateRequest0, error) {
	var body UserUpdateRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserUpdateRequest0 overwrites any union data inside the UserUpdateRequest as the provided UserUpdateRequest0
func (t *UserUpdateRequest) FromUserUpdateRequest0(v UserUpdateRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserUpdateRequest0 performs a merge with any union data inside the UserUpdateRequest, using the provided UserUpdateRequest0
func (t *UserUpdateRequest) MergeUserUpdateRequest0(v UserUpdateRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserUpdateRequest1 returns the union data inside the UserUpdateRequest as a UserUpdateRequest1
func (t UserUpdateRequest) AsUserUpdateRequest1() (UserUpdateRequest1, error) {
	var body UserUpdateRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserUpdateRequest1 overwrites any union data inside the UserUpdateRequest as the provided UserUpdateRequest1
func (t *UserUpdateRequest) FromUserUpdateRequest1(v UserUpdateRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserUpdateRequest1 performs a merge with any union data inside the UserUpdateRequest, using the provided UserUpdateRequest1
func (t *UserUpdateRequest) MergeUserUpdateRequest1(v UserUpdateRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UserUpdateRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AiEnabled != nil {
		object["ai_enabled"], err = json.Marshal(t.AiEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_enabled': %w", err)
		}
	}

	if t.AiModel != nil {
		object["ai_model"], err = json.Marshal(t.AiModel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_model': %w", err)
		}
	}

	if t.AiProvider != nil {
		object["ai_provider"], err = json.Marshal(t.AiProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ai_provider': %w", err)
		}
	}

	if t.ApiKey != nil {
		object["api_key"], err = json.Marshal(t.ApiKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'api_key': %w", err)
		}
	}

	if t.CurrentLevel != nil {
		object["current_level"], err = json.Marshal(t.CurrentLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'current_level': %w", err)
		}
	}

	if t.Email != nil {
		object["email"], err = json.Marshal(t.Email)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'email': %w", err)
		}
	}

	if t.PreferredLanguage != nil {
		object["preferred_language"], err = json.Marshal(t.PreferredLanguage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferred_language': %w", err)
		}
	}

	if t.SelectedRoles != nil {
		object["selectedRoles"], err = json.Marshal(t.SelectedRoles)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedRoles': %w", err)
		}
	}

	if t.Timezone != nil {
		object["timezone"], err = json.Marshal(t.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	if t.Username != nil {
		object["username"], err = json.Marshal(t.Username)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'username': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UserUpdateRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ai_enabled"]; found {
		err = json.Unmarshal(raw, &t.AiEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'ai_enabled': %w", err)
		}
	}

	if raw, found := object["ai_model"]; found {
		err = json.Unmarshal(raw, &t.AiModel)
		if err != nil {
			return fmt.Errorf("error reading 'ai_model': %w", err)
		}
	}

	if raw, found := object["ai_provider"]; found {
		err = json.Unmarshal(raw, &t.AiProvider)
		if err != nil {
			return fmt.Errorf("error reading 'ai_provider': %w", err)
		}
	}

	if raw, found := object["api_key"]; found {
		err = json.Unmarshal(raw, &t.ApiKey)
		if err != nil {
			return fmt.Errorf("error reading 'api_key': %w", err)
		}
	}

	if raw, found := object["current_level"]; found {
		err = json.Unmarshal(raw, &t.CurrentLevel)
		if err != nil {
			return fmt.Errorf("error reading 'current_level': %w", err)
		}
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &t.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
	}

	if raw, found := object["preferred_language"]; found {
		err = json.Unmarshal(raw, &t.PreferredLanguage)
		if err != nil {
			return fmt.Errorf("error reading 'preferred_language': %w", err)
		}
	}

	if raw, found := object["selectedRoles"]; found {
		err = json.Unmarshal(raw, &t.SelectedRoles)
		if err != nil {
			return fmt.Errorf("error reading 'selectedRoles': %w", err)
		}
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &t.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
	}

	if raw, found := object["username"]; found {
		err = json.Unmarshal(raw, &t.Username)
		if err != nil {
			return fmt.Errorf("error reading 'username': %w", err)
		}
	}

	return err
}
