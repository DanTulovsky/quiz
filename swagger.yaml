openapi: 3.0.3
info:
  title: Quiz Application API
  description: API specification for the AI-powered adaptive language learning quiz application. All `date-time` fields in this specification use RFC3339 timestamps and include timezone offsets (e.g., `2025-08-15T16:33:19Z` or `2025-08-15T12:33:19-04:00`). Servers MUST return timestamps with offsets and clients MUST parse them respecting the offset.
  version: 1.0.0
  contact:
    name: Quiz Team

paths:
  /v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user with username and password. Creates new user if doesn't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Log out the current user and clear session.
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

  /v1/auth/status:
    get:
      tags:
        - Authentication
      summary: Get authentication status
      description: Check if user is currently authenticated.
      responses:
        "200":
          description: Authentication status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthStatusResponse"

  /v1/auth/check:
    get:
      tags:
        - Authentication
      summary: Authentication check
      description: Returns 204 when the user is authenticated; returns 401 when unauthenticated. Intended for reverse proxy auth_request.
      security:
        - cookieAuth: []
      responses:
        "204":
          description: Authenticated (no content)
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/auth/signup:
    post:
      tags:
        - Authentication
      summary: User signup
      description: Create a new user account with username, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User registration is currently disabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/auth/signup/status:
    get:
      tags:
        - Authentication
      summary: Get signup status
      description: Check whether user signups are enabled or disabled
      responses:
        "200":
          description: Signup status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupStatusResponse"

  /v1/auth/google/login:
    get:
      tags:
        - Authentication
      summary: Initiate Google OAuth login
      description: Redirects user to Google OAuth for authentication
      responses:
        "200":
          description: OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleOAuthLoginResponse"

  /v1/auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Handle the callback from Google OAuth after successful authentication
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code from Google
          schema:
            type: string
        - name: state
          in: query
          description: State parameter for CSRF protection
          schema:
            type: string
      responses:
        "200":
          description: OAuth authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid authorization code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/question:
    get:
      tags:
        - Quiz
      summary: Get next question
      description: Get the next question for the authenticated user. If a specific `type` is requested and no eligible questions are currently available, the server returns 202 with a generating status and prioritizes generation of that type for the user.
      security:
        - cookieAuth: []
      parameters:
        - name: language
          in: query
          description: Preferred language for the question
          schema:
            $ref: "#/components/schemas/Language"
        - name: level
          in: query
          description: Difficulty level for the question
          schema:
            $ref: "#/components/schemas/Level"
        - name: type
          in: query
          description: Specific question type(s) to retrieve (comma-separated list). If multiple types are provided, the first valid type will be used.
          schema:
            type: string
            pattern: "^[a-zA-Z_]+(,[a-zA-Z_]+)*$"
            example: "reading_comprehension"
        - name: exclude_type
          in: query
          description: Question type(s) to exclude from random selection (comma-separated list). Useful for filtering out specific question types from the general quiz.
          schema:
            type: string
            pattern: "^[a-zA-Z_]+(,[a-zA-Z_]+)*$"
            example: "reading_comprehension"
      responses:
        "200":
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "202":
          description: No questions available, generating new ones
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratingResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/question/{id}:
    get:
      tags:
        - Quiz
      summary: Get specific question by ID
      description: Retrieve a specific question by its ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          description: Invalid question ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/answer:
    post:
      tags:
        - Quiz
      summary: Submit answer
      description: Submit an answer for a question and get feedback
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerRequest"
      responses:
        "200":
          description: Answer submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/progress:
    get:
      tags:
        - Progress
      summary: Get user progress
      description: Get detailed progress information for the authenticated user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProgress"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/question/{id}/report:
    post:
      tags:
        - Quiz
      summary: Report question
      description: Report a question as incorrect or problematic with optional explanation
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID to report
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportQuestionRequest"
      responses:
        "200":
          description: Question reported successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid question ID format or request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/question/{id}/mark-known:
    post:
      tags:
        - Quiz
      summary: Mark question as known
      description: Mark a question as known by the user, which affects priority scoring
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID to mark as known
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkQuestionKnownRequest"
      responses:
        "200":
          description: Question marked as known successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid question ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/quiz/worker-status:
    get:
      tags:
        - Quiz
      summary: Get worker status
      description: Get the current status of the question generation worker
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerStatusResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings:
    put:
      tags:
        - Settings
      summary: Update user settings
      description: Update various settings for the authenticated user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/ai-providers:
    get:
      tags:
        - Settings
      summary: Get available AI providers
      description: Retrieve the list of configured AI providers and their models
      security:
        - cookieAuth: []
      responses:
        "200":
          description: AI providers retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIProviders"

  /v1/settings/test-ai:
    post:
      tags:
        - Settings
      summary: Test AI connection
      description: Test the connection to the selected AI provider with given credentials
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestAIRequest"
      responses:
        "200":
          description: Successful AI connection test
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/test-email:
    post:
      tags:
        - Settings
      summary: Send test email
      description: Send a test email to the current user to verify email configuration
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Test email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: User does not have an email address configured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Email service not enabled or temporarily unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/levels:
    get:
      tags:
        - Settings
      summary: Get available levels
      description: Retrieve the list of available language proficiency levels and their short descriptions
      parameters:
        - name: language
          in: query
          description: Language to get levels for (optional - returns all levels if not specified)
          schema:
            type: string
      responses:
        "200":
          description: Levels and descriptions retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LevelsResponse"

  /v1/settings/languages:
    get:
      tags:
        - Settings
      summary: Get available languages
      description: Retrieve the list of available learning languages
      responses:
        "200":
          description: Languages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguagesResponse"

  /v1/settings/api-key/{provider}:
    get:
      tags:
        - Settings
      summary: Check if user has API key for provider
      description: Check if the authenticated user has a saved API key for the specified provider
      security:
        - cookieAuth: []
      parameters:
        - name: provider
          in: path
          required: true
          description: AI provider code to check
          schema:
            type: string
            pattern: "^[a-zA-Z0-9_-]+$"
            minLength: 1
            maxLength: 50
      responses:
        "200":
          description: API key availability checked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyAvailabilityResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/conversations:
    post:
      tags:
        - AI Conversations
      summary: Create a new AI conversation
      description: Create a new AI conversation for the authenticated user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConversationRequest"
      responses:
        "201":
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - AI Conversations
      summary: List user's AI conversations
      description: Retrieve a list of all AI conversations for the authenticated user
      security:
        - cookieAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of conversations to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of conversations to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Conversation"
                  total:
                    type: integer
                    description: Total number of conversations
                  limit:
                    type: integer
                    description: Number of conversations returned
                  offset:
                    type: integer
                    description: Number of conversations skipped
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/conversations/{id}:
    get:
      tags:
        - AI Conversations
      summary: Get AI conversation with messages
      description: Retrieve a specific AI conversation and all its associated messages
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation UUID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Conversation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - AI Conversations
      summary: Update AI conversation
      description: Update an AI conversation (e.g., change its title)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConversationRequest"
      responses:
        "200":
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - AI Conversations
      summary: Delete AI conversation
      description: Delete an AI conversation and all its associated messages
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation UUID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Conversation deleted successfully
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/conversations/{conversationId}/messages:
    post:
      tags:
        - AI Conversations
      summary: Add message to conversation
      description: Add a new AI chat message to an existing conversation
      security:
        - cookieAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          description: Conversation UUID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMessageRequest"
      responses:
        "201":
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessage"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/search:
    get:
      tags:
        - AI Conversations
      summary: Search AI conversations
      description: Search across all AI conversations belonging to the authenticated user
      security:
        - cookieAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query string
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Conversation"
                  query:
                    type: string
                    description: The search query that was used
                  total:
                    type: integer
                    description: Total number of matching conversations
                  limit:
                    type: integer
                    description: Number of conversations returned
                  offset:
                    type: integer
                    description: Number of conversations skipped
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/conversations/bookmark:
    put:
      tags:
        - AI Conversations
      summary: Toggle message bookmark
      description: Toggle the bookmark status of a specific message in a conversation
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - conversation_id
                - message_id
              properties:
                conversation_id:
                  type: string
                  format: uuid
                  description: ID of the conversation containing the message
                message_id:
                  type: string
                  format: uuid
                  description: ID of the message to bookmark/unbookmark
      responses:
        "200":
          description: Message bookmark status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookmarked:
                    type: boolean
                    description: The new bookmark status of the message
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Conversation or message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/ai/bookmarks:
    get:
      tags:
        - AI Conversations
      summary: Get bookmarked messages
      description: Retrieve all bookmarked AI chat messages for the authenticated user with optional search
      security:
        - cookieAuth: []
      parameters:
        - name: q
          in: query
          required: false
          description: Optional search query to filter bookmarked messages
          schema:
            type: string
            maxLength: 255
        - name: limit
          in: query
          description: Maximum number of messages to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of messages to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Bookmarked messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatMessage"
                  query:
                    type: string
                    description: The search query that was used (if any)
                  total:
                    type: integer
                    description: Total number of bookmarked messages
                  limit:
                    type: integer
                    description: Number of messages returned
                  offset:
                    type: integer
                    description: Number of messages skipped
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/snippets:
    post:
      tags:
        - Snippets
      summary: Save a new vocabulary snippet
      description: Save a word or phrase with its translation for later review
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSnippetRequest"
      responses:
        "201":
          description: Snippet saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Snippet already exists for this user and text
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Snippets
      summary: List user's saved snippets
      description: Retrieve all vocabulary snippets saved by the authenticated user
      security:
        - cookieAuth: []
      parameters:
        - name: q
          in: query
          required: false
          description: Optional search query to filter snippets by text content
          schema:
            type: string
            maxLength: 255
        - name: source_lang
          in: query
          required: false
          description: Filter by source language
          schema:
            type: string
            maxLength: 10
        - name: target_lang
          in: query
          required: false
          description: Filter by target language
          schema:
            type: string
            maxLength: 10
        - name: limit
          in: query
          required: false
          description: Maximum number of snippets to return (default 50, max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          required: false
          description: Number of snippets to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Snippets retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnippetList"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/snippets/search:
    get:
      tags:
        - Snippets
      summary: Search snippets
      description: Search across all snippets for the authenticated user
      security:
        - cookieAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query string
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  snippets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Snippet"
                  query:
                    type: string
                    description: The search query that was used
                  total:
                    type: integer
                    description: Total number of matching snippets
                  limit:
                    type: integer
                    description: Number of snippets returned
                  offset:
                    type: integer
                    description: Number of snippets skipped
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/snippets/{id}:
    get:
      tags:
        - Snippets
      summary: Get a specific snippet by ID
      description: Retrieve a single vocabulary snippet by its ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Snippet ID
          schema:
            type: integer
      responses:
        "200":
          description: Snippet retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        "404":
          description: Snippet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Snippets
      summary: Update a snippet
      description: Update any field of a vocabulary snippet
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Snippet ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSnippetRequest"
      responses:
        "200":
          description: Snippet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Snippet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Snippets
      summary: Delete a snippet
      description: Delete a vocabulary snippet
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Snippet ID
          schema:
            type: integer
      responses:
        "204":
          description: Snippet deleted successfully
        "404":
          description: Snippet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/userz/profile:
    put:
      tags:
        - User Management
      summary: Update current user profile
      description: Update the profile of the currently authenticated user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend:
    get:
      tags:
        - Admin
      summary: Get backend admin page
      description: Get the backend admin interface HTML page (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Admin page retrieved successfully
          content:
            text/html:
              schema:
                type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz:
    get:
      tags:
        - Admin
      summary: List all users
      description: Get a list of all users (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    maxItems: 1000
                    items:
                      $ref: "#/components/schemas/UserProfile"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Admin
      summary: Create a new user
      description: Create a new user account (admin only)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: "^[a-zA-Z0-9_@.+-]+$"
                  description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
                email:
                  type: string
                  format: email
                  description: Email address for the new user
                password:
                  type: string
                  description: Password for the new user
                  minLength: 8
                language:
                  type: string
                  description: Preferred language for the user
                level:
                  type: string
                  description: Current level for the user
                ai_provider:
                  type: string
                  description: AI provider preference
                ai_model:
                  type: string
                  description: AI model preference
                ai_enabled:
                  type: boolean
                  description: Whether AI is enabled for this user
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/clear-stories:
    post:
      tags:
        - Settings
      summary: Delete all stories for the authenticated user
      description: Permanently deletes all stories, sections, and story-generated questions belonging to the authenticated user. This action is irreversible.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Stories deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error while deleting stories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/reset-account:
    post:
      tags:
        - Settings
      summary: Reset the authenticated user's account
      description: Clears the authenticated user's activity (questions, responses, performance metrics) and deletes all stories. This is irreversible.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Account reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error while resetting account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/settings/clear-ai-chats:
    post:
      tags:
        - Settings
      summary: Delete all AI chats for the authenticated user
      description: Permanently deletes all AI conversations and their associated messages belonging to the authenticated user. This action is irreversible.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: AI chats deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error while deleting AI chats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/paginated:
    get:
      tags:
        - Admin
      summary: Get paginated users with filtering
      description: Get paginated users with search and filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for username or email
          schema:
            type: string
        - name: language
          in: query
          description: Filter by preferred language
          schema:
            $ref: "#/components/schemas/Language"
        - name: level
          in: query
          description: Filter by current level
          schema:
            $ref: "#/components/schemas/Level"
        - name: ai_provider
          in: query
          description: Filter by AI provider
          schema:
            type: string
        - name: ai_model
          in: query
          description: Filter by AI model
          schema:
            type: string
        - name: ai_enabled
          in: query
          description: Filter by AI enabled status
          schema:
            type: string
            enum: ["true", "false"]
        - name: active
          in: query
          description: Filter by active status (active within 7 days)
          schema:
            type: string
            enum: ["true", "false"]
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          $ref: "#/components/schemas/UserProfile"
                        progress:
                          $ref: "#/components/schemas/UserProgress"
                        question_stats:
                          type: object
                          properties:
                            user_id:
                              type: integer
                            total_answered:
                              type: integer
                            answered_by_type:
                              type: object
                            answered_by_level:
                              type: object
                            accuracy_by_type:
                              type: object
                            accuracy_by_level:
                              type: object
                            available_by_type:
                              type: object
                            available_by_level:
                              type: object
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/{id}:
    put:
      tags:
        - Admin
      summary: Update user details
      description: Update user details (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete a user (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/{id}/reset-password:
    post:
      tags:
        - Admin
      summary: Reset user password
      description: Reset a user's password (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/roles:
    get:
      tags:
        - Admin
      summary: Get all roles
      description: Get all available roles in the system (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/Role"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/{id}/roles:
    get:
      tags:
        - Admin
      summary: Get user roles
      description: Get all roles for a specific user (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/Role"
        "400":
          description: Invalid user ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found or user does not have the specified role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Admin
      summary: Assign role to user
      description: Assign a role to a specific user (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role_id
              properties:
                role_id:
                  type: integer
                  format: int64
                  minimum: 1
                  description: Role ID to assign
      responses:
        "200":
          description: Role assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found or user does not have the specified role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/{id}/roles/{roleId}:
    delete:
      tags:
        - Admin
      summary: Remove role from user
      description: Remove a role from a specific user (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: roleId
          in: path
          required: true
          description: Role ID to remove
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Role removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found or user does not have the specified role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/dashboard:
    get:
      tags:
        - Admin
      summary: Get backend admin dashboard data
      description: Get comprehensive admin dashboard data including user stats, worker health, and AI concurrency (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/ai-concurrency:
    get:
      tags:
        - Admin
      summary: Get AI concurrency statistics
      description: Get real-time AI concurrency statistics (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: AI concurrency stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIConcurrencyStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/status:
    get:
      tags:
        - Admin
      summary: Get worker status
      description: Get the current status of the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkerStatus"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/details:
    get:
      tags:
        - Admin
      summary: Get worker details
      description: Get detailed information about the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/pause:
    post:
      tags:
        - Admin
      summary: Pause worker
      description: Pause the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker paused successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/resume:
    post:
      tags:
        - Admin
      summary: Resume worker
      description: Resume the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker resumed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/trigger:
    post:
      tags:
        - Admin
      summary: Trigger worker run
      description: Trigger a manual worker run (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker run triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/logs:
    get:
      tags:
        - Admin
      summary: Get worker logs
      description: Get worker activity logs (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/ai-concurrency:
    get:
      tags:
        - Admin
      summary: Get worker AI concurrency statistics
      description: Get AI concurrency statistics from the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: AI concurrency stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  active_requests:
                    type: integer
                  max_concurrent:
                    type: integer
                  queued_requests:
                    type: integer
                  total_requests:
                    type: integer
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/users:
    get:
      tags:
        - Admin
      summary: Get worker user list with pause status
      description: Get list of users with their worker pause status (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Worker users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        username:
                          type: string
                        is_paused:
                          type: boolean
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/users/pause:
    post:
      tags:
        - Admin
      summary: Pause worker for a specific user
      description: Pause question generation for a specific user (admin only)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIdRequest"
      responses:
        "200":
          description: User paused successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/users/resume:
    post:
      tags:
        - Admin
      summary: Resume worker for a specific user
      description: Resume question generation for a specific user (admin only)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIdRequest"
      responses:
        "200":
          description: User resumed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/analytics/priority-scores:
    get:
      tags:
        - Admin
      summary: Get worker priority analytics
      description: Get priority analytics from the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Priority analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  distribution:
                    type: object
                    properties:
                      high:
                        type: integer
                      medium:
                        type: integer
                      low:
                        type: integer
                      average:
                        type: number
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/analytics/user-performance:
    get:
      tags:
        - Admin
      summary: Get worker user performance analytics
      description: Get user performance analytics from the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User performance analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPerformanceAnalytics"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/analytics/generation-intelligence:
    get:
      tags:
        - Admin
      summary: Get worker generation intelligence
      description: Get generation intelligence from the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Generation intelligence retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerationIntelligence"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/analytics/system-health:
    get:
      tags:
        - Admin
      summary: Get worker system health analytics
      description: Get system health analytics from the worker (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: System health analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemHealthAnalytics"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/notifications/stats:
    get:
      tags:
        - Admin
      summary: Get notification statistics
      description: Get comprehensive notification statistics including sent count, error count, and user statistics (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Notification statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/notifications/errors:
    get:
      tags:
        - Admin
      summary: Get notification errors
      description: Get paginated list of notification errors with filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of errors per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: error_type
          in: query
          description: Filter by error type
          schema:
            type: string
            enum:
              [
                "smtp_error",
                "template_error",
                "user_not_found",
                "email_disabled",
                "other",
              ]
        - name: notification_type
          in: query
          description: Filter by notification type
          schema:
            type: string
            enum: ["daily_reminder", "test_email"]
        - name: resolved
          in: query
          description: Filter by resolution status
          schema:
            type: string
            enum: ["true", "false"]
      responses:
        "200":
          description: Notification errors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationError"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
                  stats:
                    $ref: "#/components/schemas/NotificationErrorStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/notifications/sent:
    get:
      tags:
        - Admin
      summary: Get sent notifications
      description: Get paginated list of sent notifications with filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of notifications per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: notification_type
          in: query
          description: Filter by notification type
          schema:
            type: string
            enum: ["daily_reminder", "test_email"]
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: ["sent", "failed", "bounced"]
        - name: sent_after
          in: query
          description: Filter notifications sent after this timestamp
          schema:
            type: string
            format: date-time-time
        - name: sent_before
          in: query
          description: Filter notifications sent before this timestamp
          schema:
            type: string
            format: date-time-time
      responses:
        "200":
          description: Sent notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: "#/components/schemas/SentNotification"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
                  stats:
                    $ref: "#/components/schemas/NotificationStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/notifications/force-send:
    post:
      tags:
        - Admin
      summary: Force send notification to user
      description: Force send a daily reminder notification to a specific user, bypassing normal time and date checks (admin only)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  description: Username of the user to send notification to
                  example: "testuser"
      responses:
        "200":
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForceSendNotificationResponse"
        "400":
          description: Invalid request or user has notifications disabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Email service not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions:
    get:
      tags:
        - Admin
      summary: Get all questions with pagination and filtering
      description: Get all questions in the system with pagination, search, and filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of questions per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for question content
          schema:
            type: string
        - name: type
          in: query
          description: Filter by question type
          schema:
            $ref: "#/components/schemas/QuestionType"
        - name: status
          in: query
          description: Filter by question status
          schema:
            $ref: "#/components/schemas/QuestionStatus"
        - name: language
          in: query
          description: Filter by language
          schema:
            $ref: "#/components/schemas/Language"
        - name: level
          in: query
          description: Filter by level
          schema:
            $ref: "#/components/schemas/Level"
        - name: user_id
          in: query
          description: Filter by user ID (optional)
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
                  stats:
                    $ref: "#/components/schemas/QuestionStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/paginated:
    get:
      tags:
        - Admin
      summary: Get paginated questions
      description: Get questions with pagination support (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of questions per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for question content
          schema:
            type: string
        - name: type
          in: query
          description: Filter by question type
          schema:
            $ref: "#/components/schemas/QuestionType"
        - name: status
          in: query
          description: Filter by question status
          schema:
            $ref: "#/components/schemas/QuestionStatus"
        - name: language
          in: query
          description: Filter by language
          schema:
            $ref: "#/components/schemas/Language"
        - name: level
          in: query
          description: Filter by level
          schema:
            $ref: "#/components/schemas/Level"
        - name: user_id
          in: query
          description: Filter by user ID (optional)
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
                  stats:
                    $ref: "#/components/schemas/QuestionStats"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}:
    get:
      tags:
        - Admin
      summary: Get a single question by ID
      description: Get a specific question by its ID for editing (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          description: Invalid question ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Admin
      summary: Update a question
      description: Update a specific question by its ID (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - explanation
              properties:
                content:
                  type: object
                  description: Updated question content
                correct_answer:
                  type: integer
                  description: Index of the correct answer
                explanation:
                  type: string
                  description: Explanation for the correct answer
      responses:
        "200":
          description: Question updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Admin
      summary: Delete a question
      description: Delete a specific question by its ID (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid question ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}/users:
    get:
      tags:
        - Admin
      summary: Get users assigned to a question
      description: Get the users assigned to a specific question, showing up to 5 users and the total count (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    maxItems: 5
                    items:
                      $ref: "#/components/schemas/UserProfile"
                  total_count:
                    type: integer
                    description: Total number of users assigned to this question
        "400":
          description: Invalid question ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}/assign-users:
    post:
      tags:
        - Admin
      summary: Assign users to a question
      description: Assign multiple users to a specific question (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_ids
              properties:
                user_ids:
                  type: array
                  minItems: 1
                  items:
                    type: integer
                    format: int64
                    minimum: 1
                  description: Array of user IDs to assign to the question
      responses:
        "200":
          description: Users assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}/unassign-users:
    post:
      tags:
        - Admin
      summary: Unassign users from a question
      description: Remove multiple users from a specific question (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_ids
              properties:
                user_ids:
                  type: array
                  minItems: 1
                  items:
                    type: integer
                    format: int64
                    minimum: 1
                  description: Array of user IDs to unassign from the question
      responses:
        "200":
          description: Users unassigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}/fix:
    post:
      tags:
        - Admin
      summary: Mark question as fixed
      description: Mark a reported question as fixed (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Question marked as fixed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/questions/{id}/ai-fix:
    post:
      tags:
        - Admin
      summary: Fix question with AI
      description: Use AI to automatically fix a reported question (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: Optional additional context to include in the AI prompt (admin-provided)
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                additional_context:
                  type: string
      responses:
        "200":
          description: Question fixed with AI successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/clear-user-data:
    post:
      tags:
        - Admin
      summary: Clear all user data
      description: Clear all user data including questions, responses, and stats (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: All user data cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/clear-database:
    post:
      tags:
        - Admin
      summary: Clear entire database
      description: Clear all data from the database (admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Database cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/userz/{id}/clear:
    post:
      tags:
        - Admin
      summary: Clear user data for specific user
      description: Clear all data for a specific user including questions, responses, and stats (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: User data cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/reported-questions:
    get:
      tags:
        - Admin
      summary: Get reported questions with pagination and filtering
      description: Get all reported questions with pagination, search, and filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of questions per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for question content
          schema:
            type: string
        - name: type
          in: query
          description: Filter by question type
          schema:
            $ref: "#/components/schemas/QuestionType"
        - name: language
          in: query
          description: Filter by language
          schema:
            $ref: "#/components/schemas/Language"
        - name: level
          in: query
          description: Filter by level
          schema:
            $ref: "#/components/schemas/Level"
      responses:
        "200":
          description: Reported questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
                  stats:
                    type: object
                    properties:
                      total_reported:
                        type: integer
                      reported_by_type:
                        type: object
                      reported_by_level:
                        type: object
                      reported_by_language:
                        type: object
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/stories:
    get:
      tags:
        - Admin
      summary: Get all stories with pagination and filtering
      description: Get all user stories with pagination, search, and filtering options (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of stories per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for story title
          schema:
            type: string
        - name: language
          in: query
          description: Filter by language
          schema:
            $ref: "#/components/schemas/Language"
        - name: status
          in: query
          description: Filter by story status
          schema:
            $ref: "#/components/schemas/StoryStatus"
        - name: user_id
          in: query
          description: Filter by user ID (optional)
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Stories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  stories:
                    type: array
                    items:
                      $ref: "#/components/schemas/Story"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/stories/{id}:
    get:
      tags:
        - Admin
      summary: Get a single story by ID (with sections)
      description: Get a specific story with its sections (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Story ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Story retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoryWithSections"
        "400":
          description: Invalid story ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Admin
      summary: Delete a story (admin)
      description: Delete a user story by ID. Admins can delete stories regardless of status. Admin only.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Story ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Story deleted successfully
        "400":
          description: Invalid story ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Cannot delete active story
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/backend/story-sections/{id}:
    get:
      tags:
        - Admin
      summary: Get a story section with questions by ID
      description: Get a specific story section and its questions (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Story section ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Story section retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorySectionWithQuestions"
        "400":
          description: Invalid section ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User not authorized (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Story section not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/quiz/chat/stream:
    post:
      summary: Get a streaming AI-powered explanation or chat about a question.
      tags:
        - Quiz
      security:
        - cookieAuth: []
      requestBody:
        description: The user's message and the context of the quiz question.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuizChatRequest"
      responses:
        "200":
          description: Streaming response with AI messages via Server-Sent Events.
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream with AI response chunks
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/questions/{date}:
    get:
      tags:
        - Daily Questions
      summary: Get daily questions for a specific date
      description: Retrieve all daily questions assigned to the user for a specific date
      security:
        - cookieAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
      responses:
        "200":
          description: Daily questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyQuestionWithDetails"
                  date:
                    type: string
                    format: date
                    example: "2024-01-15"
        "400":
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/questions/{date}/complete/{questionId}:
    post:
      tags:
        - Daily Questions
      summary: Mark daily question as completed
      description: Mark a specific daily question as completed for the given date
      security:
        - cookieAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
        - name: questionId
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            example: 123
      responses:
        "200":
          description: Question marked as completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid date format or question ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to mark question as completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Daily Questions
      summary: Reset daily question completion
      description: Reset a specific daily question completion status for the given date
      security:
        - cookieAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
        - name: questionId
          in: path
          required: true
          description: Question ID
          schema:
            type: integer
            example: 123
      responses:
        "200":
          description: Question completion reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid date format or question ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to reset question completion
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/dates:
    get:
      tags:
        - Daily Questions
      summary: Get available dates with daily question assignments
      description: Retrieve all dates for which the user has daily question assignments
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Available dates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dates:
                    type: array
                    items:
                      type: string
                      format: date
                    example: ["2024-01-15", "2024-01-16", "2024-01-17"]
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to get available dates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/questions/{date}/answer/{questionId}:
    post:
      tags:
        - Daily Questions
      summary: Submit answer for daily question
      description: Submit an answer for a specific daily question and mark it as completed
      security:
        - cookieAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
        - name: questionId
          in: path
          required: true
          description: ID of the question to answer
          schema:
            type: integer
            format: int64
            example: 123
      requestBody:
        description: The user's answer
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_answer_index
              properties:
                user_answer_index:
                  type: integer
                  minimum: 0
                  maximum: 3
                  description: Index of the user's selected answer (0-based)
                  example: 2
      responses:
        "200":
          description: Answer submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/AnswerResponse"
                  - type: object
                    properties:
                      is_completed:
                        type: boolean
                        description: Whether the question is now completed
                        example: true
        "400":
          description: Invalid request or question already answered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Question not found or not assigned for this date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to submit answer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/progress/{date}:
    get:
      tags:
        - Daily Questions
      summary: Get daily progress for a specific date
      description: Get progress information (completed vs total questions) for a specific date
      security:
        - cookieAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: "2024-01-15"
      responses:
        "200":
          description: Daily progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyProgress"
        "400":
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to get daily progress
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/daily/history/{questionId}:
    get:
      tags:
        - Daily Questions
      summary: Get question history
      description: Retrieve the history of a specific question for the user over the last 14 days
      security:
        - cookieAuth: []
      parameters:
        - name: questionId
          in: path
          required: true
          description: ID of the question to get history for
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        "200":
          description: Question history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyQuestionHistory"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story:
    post:
      tags:
        - Story
      summary: Create a new story
      description: Create a new story for the authenticated user. The story will automatically become their current active story.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStoryRequest"
      responses:
        "201":
          description: Story created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Story"
        "400":
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Maximum archived stories limit reached
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Story
      summary: Get user stories
      description: Retrieve all stories for the authenticated user, optionally including archived stories.
      security:
        - cookieAuth: []
      parameters:
        - name: include_archived
          in: query
          required: false
          description: Include archived stories in the response
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Stories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Story"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/current:
    get:
      tags:
        - Story
      summary: Get current story
      description: Retrieve the user's current active story with all sections. If a story exists but has no sections yet, returns 202 with generating status as the first section is being created.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Current story retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoryWithSections"
        "202":
          description: Story exists but first section is being generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratingResponse"
        "404":
          description: No current story found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}:
    get:
      tags:
        - Story
      summary: Get a specific story
      description: Retrieve a specific story by ID with all sections.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to retrieve
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Story retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoryWithSections"
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Story
      summary: Delete a story
      description: Delete a story. Only archived or completed stories can be deleted.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to delete
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Story deleted successfully
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Cannot delete current story
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}/generate:
    post:
      tags:
        - Story
      summary: Generate next section
      description: Manually generate the next section for a story. Only allowed once per day.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to generate a section for
          schema:
            type: integer
            format: int64
      requestBody:
        description: No request body required for this endpoint
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmptyRequest"
      responses:
        "201":
          description: Section generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorySection"
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Section already generated today or story is not active
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}/archive:
    post:
      tags:
        - Story
      summary: Archive a story
      description: Archive a story, removing it from the current active story.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to archive
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Story archived successfully
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}/complete:
    post:
      tags:
        - Story
      summary: Complete a story
      description: Mark a story as completed.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to complete
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Story completed successfully
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}/set-current:
    post:
      tags:
        - Story
      summary: Set story as current
      description: Set a story as the user's current active story.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to set as current
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Story set as current successfully
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/section/{id}:
    get:
      tags:
        - Story
      summary: Get a story section
      description: Retrieve a specific story section with its questions.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the section to retrieve
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Section retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorySectionWithQuestions"
        "404":
          description: Section not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/story/{id}/export:
    get:
      tags:
        - Story
      summary: Export story as PDF
      description: Generate and download a PDF file containing the complete story.
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the story to export
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: PDF generated successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: Story not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/preferences/learning:
    get:
      tags:
        - Preferences
      summary: Get user learning preferences
      description: Retrieve the current user's learning preferences
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Learning preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLearningPreferences"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Preferences
      summary: Update user learning preferences
      description: Update the current user's learning preferences
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLearningPreferences"
      responses:
        "200":
          description: Learning preferences updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLearningPreferences"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/version:
    get:
      tags:
        - System
      summary: Get service version info
      description: Returns aggregated version information for backend and worker services
      responses:
        "200":
          description: Version info retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregatedVersion"

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns the health status of the service
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["ok"]
                    description: Health status of the service
                  service:
                    type: string
                    description: Service name
        "503":
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["unhealthy"]
                  timestamp:
                    type: string
                    format: date-time-time
                  error:
                    type: string
                    description: Error message describing the health issue

  /v1/admin/worker/daily/users/{userId}/questions/{date}:
    get:
      tags:
        - Worker Admin
      summary: Get daily questions for a specific user and date
      description: Retrieve all daily questions assigned to a specific user for a given date (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        "200":
          description: Daily questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyQuestionWithDetails"
        "400":
          description: Invalid user ID or date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to get daily questions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/worker/daily/users/{userId}/questions/{date}/regenerate:
    post:
      tags:
        - Worker Admin
      summary: Regenerate daily questions for a specific user and date
      description: Clear and regenerate daily questions for a specific user and date (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            format: date
            example: "2024-01-15"
      responses:
        "200":
          description: Daily questions regenerated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid user ID or date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to regenerate daily questions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/translate:
    post:
      tags:
        - Translation
      summary: Translate text
      description: Translate text to a target language using configured translation provider
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranslateRequest"
      responses:
        "200":
          description: Translation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranslateResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Translation service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/audio/speech:
    post:
      tags:
        - Text-to-Speech
      summary: Generate speech from text
      description: Convert text to speech using the TTS service with SSE streaming support
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TTSRequest"
      responses:
        "200":
          description: Speech generation successful
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/TTSResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    CreateConversationRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Title for the conversation

    UpdateConversationRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: New title for the conversation

    CreateMessageRequest:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: ["user", "assistant"]
          description: Role of the message sender
        content:
          type: object
          description: Message content
          properties:
            text:
              type: string
              description: The actual message text
        question_id:
          type: integer
          description: Optional question ID if this message relates to a specific question

    Conversation:
      type: object
      required:
        - id
        - user_id
        - title
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Conversation UUID
        user_id:
          type: integer
          description: ID of the user who owns this conversation
        title:
          type: string
          description: Conversation title
        created_at:
          type: string
          format: date-time
          description: When the conversation was created
        updated_at:
          type: string
          format: date-time
          description: When the conversation was last updated
        message_count:
          type: integer
          description: Total number of messages in this conversation
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
          description: Array of messages in this conversation (optional, only included when requested)

    ChatMessage:
      type: object
      required:
        - id
        - conversation_id
        - role
        - content
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Message UUID
        conversation_id:
          type: string
          format: uuid
          description: ID of the conversation this message belongs to
        question_id:
          type: integer
          description: Optional question ID if this message relates to a specific question
        role:
          type: string
          enum: ["user", "assistant"]
          description: Role of the message sender
        content:
          type: object
          description: Message content
          properties:
            text:
              type: string
              description: The actual message text
        bookmarked:
          type: boolean
          description: Whether this message is bookmarked
        created_at:
          type: string
          format: date-time
          description: When the message was created
        updated_at:
          type: string
          format: date-time
          description: When the message was last updated
        conversation_title:
          type: string
          description: Title of the conversation (optional, included in search results)



    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: Password (minimum 8 characters)

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
        redirect_uri:
          type: string
          description: Redirect URI for OAuth flows (optional)

    AuthStatusResponse:
      type: object
      properties:
        authenticated:
          type: boolean
          description: Whether the user is currently authenticated
        user:
          $ref: "#/components/schemas/User"
          nullable: true
          description: User object if authenticated, null otherwise
      required:
        - authenticated
        - user

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        email:
          type: string
          nullable: true
        timezone:
          type: string
          nullable: true
        preferred_language:
          type: string
          nullable: true
        current_level:
          type: string
          nullable: true
        ai_provider:
          type: string
          nullable: true
        ai_model:
          type: string
          nullable: true
        ai_enabled:
          type: boolean
          nullable: true
          description: Whether AI features are enabled for this user
        is_paused:
          type: boolean
          description: Whether the user is paused (question generation disabled)
        has_api_key:
          type: boolean
          description: Whether the user has a valid API key saved for their current AI provider
        created_at:
          type: string
          format: date-time-time
        last_active:
          type: string
          format: date-time-time
          nullable: true
        roles:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/Role"
          description: List of roles assigned to the user

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        language:
          $ref: "#/components/schemas/Language"
        level:
          $ref: "#/components/schemas/Level"
        type:
          $ref: "#/components/schemas/QuestionType"
        status:
          $ref: "#/components/schemas/QuestionStatus"
        difficulty_score:
          type: number
          format: float
        explanation:
          type: string
        content:
          description: All question types now use multiple choice format with 4 options
          $ref: "#/components/schemas/QuestionContent"
        created_at:
          type: string
          format: date-time-time
        correct_count:
          type: integer
          description: Number of times this question was answered correctly
        incorrect_count:
          type: integer
          description: Number of times this question was answered incorrectly
        total_responses:
          type: integer
          description: Total number of responses to this question (used for 'Shown' in the UI)
        user_count:
          type: integer
          description: Number of users assigned to this question
        correct_answer:
          type: integer
          description: Index of the correct answer in the options array (0-based)
        reporters:
          type: string
          description: Comma-separated list of usernames who reported this question
        topic_category:
          type: string
          description: General topic category for question context (e.g., daily_life, travel, work)
        grammar_focus:
          type: string
          description: Grammar focus area for the question (e.g., present_perfect, conditionals)
        vocabulary_domain:
          type: string
          description: Vocabulary domain for the question (e.g., food_and_dining, transportation)
        scenario:
          type: string
          description: Scenario context for the question (e.g., at_the_airport, in_a_restaurant)
        style_modifier:
          type: string
          description: Style modifier for the question (e.g., conversational, formal)
        difficulty_modifier:
          type: string
          description: Difficulty modifier for the question (e.g., basic, intermediate)
        time_context:
          type: string
          description: Time context for the question (e.g., morning_routine, workday)
        confidence_level:
          type: integer
          minimum: 1
          maximum: 5
          description: Confidence level when question was marked as known (1-5)

    QuestionContent:
      type: object
      description: All question types now use multiple choice format with 4 options
      required:
        - question
        - options
      additionalProperties: false
      properties:
        question:
          type: string
          minLength: 1
          maxLength: 1000
        options:
          type: array
          minItems: 4
          maxItems: 10
          items:
            type: string
            minLength: 1
            maxLength: 500
        sentence:
          type: string
          description: Only present for vocabulary questions (context sentence)
          maxLength: 2000
        passage:
          type: string
          description: Only present for reading comprehension questions
          maxLength: 5000
        hint:
          type: string
          description: Optional hint for fill-in-blank questions
          maxLength: 500

    AnswerRequest:
      type: object
      required:
        - question_id
        - user_answer_index
      properties:
        question_id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the question being answered
        user_answer_index:
          type: integer
          minimum: 0
          maximum: 3
          description: Index of the user's selected answer in the original options array (0-based)
        response_time_ms:
          type: integer
          format: int32
          minimum: 0
          maximum: 300000
          description: Response time in milliseconds (0-5 minutes)

    AnswerResponse:
      type: object
      properties:
        is_correct:
          type: boolean
        user_answer:
          type: string
          description: The answer selected by the user
        user_answer_index:
          type: integer
          description: Index of the user's selected answer in the original options array (0-based)
        explanation:
          type: string
        next_difficulty:
          type: string
        correct_answer_index:
          type: integer
          description: Index of the correct answer in the options array (0-based)

    UserProgress:
      type: object
      properties:
        current_level:
          $ref: "#/components/schemas/Level"
        suggested_level:
          $ref: "#/components/schemas/Level"
        accuracy_rate:
          type: number
          format: float
          minimum: 0
          maximum: 1
        total_questions:
          type: integer
          minimum: 0
        correct_answers:
          type: integer
          minimum: 0
        performance_by_topic:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PerformanceMetrics"
        weak_areas:
          type: array
          maxItems: 50
          items:
            type: string
        recent_activity:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/UserResponse"
        # Worker-related information for user understanding
        worker_status:
          $ref: "#/components/schemas/WorkerStatus"
        learning_preferences:
          $ref: "#/components/schemas/UserLearningPreferences"
        priority_insights:
          $ref: "#/components/schemas/PriorityInsights"
        generation_focus:
          $ref: "#/components/schemas/GenerationFocus"
        # Additional worker insights for enhanced user understanding
        high_priority_topics:
          type: array
          maxItems: 20
          items:
            type: string
          description: Topics that have high priority scores for the user
        gap_analysis:
          type: object
          additionalProperties: true
          description: Analysis of learning gaps and areas needing attention
        priority_distribution:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
          description: Distribution of question priorities (high, medium, low counts)

    PerformanceMetrics:
      type: object
      properties:
        correct_attempts:
          type: integer
          minimum: 0
        total_attempts:
          type: integer
          minimum: 0
        average_response_time_ms:
          type: number
          format: float
          minimum: 0
        last_updated:
          type: string
          format: date-time-time

    UserResponse:
      type: object
      properties:
        question_id:
          type: integer
          format: int64
          minimum: 1
        is_correct:
          type: boolean
        created_at:
          type: string
          format: date-time-time

    UserSettings:
      type: object
      properties:
        language:
          $ref: "#/components/schemas/Language"
        level:
          $ref: "#/components/schemas/Level"
        ai_provider:
          type: string
          pattern: "^[a-zA-Z0-9_.-]*$"
          maxLength: 50
        ai_model:
          type: string
          pattern: "^[a-zA-Z0-9_.:-]*$"
          maxLength: 50
        ai_enabled:
          type: boolean
          description: Whether AI features are enabled for this user
        api_key:
          type: string
          maxLength: 1000
          description: API key for AI provider (write-only)
      anyOf:
        - required: ["ai_provider", "ai_model"]
        - not:
            required: ["ai_provider"]

    TestAIRequest:
      type: object
      required:
        - provider
        - model
      properties:
        provider:
          type: string
          description: AI provider code (e.g., "ollama", "openai")
          pattern: "^[a-zA-Z0-9_.-]+$"
          maxLength: 50
        model:
          type: string
          description: AI model code (e.g., "llama3", "gpt-4")
          pattern: "^[a-zA-Z0-9_.:-]+$"
          maxLength: 50
        api_key:
          type: string
          description: API key for the provider. If not provided, the server will try to use a saved key.
          nullable: true
          maxLength: 1000

    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        message:
          type: string
          maxLength: 500

    DailyQuestionWithDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Daily question assignment ID
        user_id:
          type: integer
          format: int64
          description: User ID
        question_id:
          type: integer
          format: int64
          description: Question ID
        assignment_date:
          type: string
          format: date
          description: Date-only assignment (YYYY-MM-DD) representing the logical calendar day the question was assigned (no timezone offset)
        is_completed:
          type: boolean
          description: Whether the question has been completed
        completed_at:
          type: string
          format: date-time-time
          nullable: true
          description: When the question was completed (if completed)
        created_at:
          type: string
          format: date-time-time
          description: When the assignment was created
        user_answer_index:
          type: integer
          nullable: true
          description: The index of the answer option the user selected (0-based)
        submitted_at:
          type: string
          format: date-time-time
          nullable: true
          description: When the user submitted their answer
        user_shown_count:
          type: integer
          format: int64
          description: Number of times this question was shown to this user in Daily view
        user_total_responses:
          type: integer
          format: int64
          description: Number of times this user answered this question
        user_correct_count:
          type: integer
          format: int64
          description: Number of times this user answered this question correctly
        user_incorrect_count:
          type: integer
          format: int64
          description: Number of times this user answered this question incorrectly
        question:
          $ref: "#/components/schemas/Question"
          description: Full question details
      required:
        - id
        - user_id
        - question_id
        - assignment_date
        - is_completed
        - created_at
        - question

    DailyProgress:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date for the progress report (YYYY-MM-DD)
          example: "2024-01-15"
        completed:
          type: integer
          description: Number of completed questions
          example: 7
        total:
          type: integer
          description: Total number of questions assigned for the date
          example: 10
      required:
        - date
        - completed
        - total

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code identifying the type of error
        message:
          type: string
          description: Human-readable error message
        error:
          type: string
          maxLength: 500
          description: Error message (for backward compatibility)
        details:
          type: string
          maxLength: 1000
          description: Additional error details
        retryable:
          type: boolean
          description: Whether the operation can be retried
        severity:
          type: string
          enum: [info, warn, error, fatal]
          description: Severity level of the error

    SignupStatusResponse:
      type: object
      properties:
        signups_disabled:
          type: boolean
          description: Whether user signups are currently disabled
      required:
        - signups_disabled

    ReportQuestionRequest:
      type: object
      properties:
        report_reason:
          type: string
          maxLength: 512
          description: Optional explanation for why the question is being reported

    MarkQuestionKnownRequest:
      type: object
      properties:
        confidence_level:
          type: integer
          minimum: 1
          maximum: 5
          description: User's confidence level (1-5, optional)

    GeneratingResponse:
      type: object
      properties:
        status:
          type: string
          maxLength: 100
        message:
          type: string
          maxLength: 500
        ai_model:
          type: string
          description: User's preferred AI model
          example: "llama3"
        api_key:
          type: string
          description: "User's API key for the selected provider (write-only)"
          example: "sk-..."

    AIProviders:
      type: object
      properties:
        providers:
          type: array
          maxItems: 50
          items:
            type: object
            properties:
              name:
                type: string
                maxLength: 100
              code:
                type: string
                pattern: "^[a-zA-Z0-9_.-]+$"
                maxLength: 50
              url:
                type: string
                maxLength: 500
              models:
                type: array
                maxItems: 100
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      maxLength: 100
                    code:
                      type: string
                      pattern: "^[a-zA-Z0-9_.:-]+$"
                      maxLength: 50
        levels:
          type: array
          maxItems: 20
          items:
            type: string

    Language:
      type: string
      description: "Learning language (dynamic). Allowed values come from config.yaml language_levels keys."

    Level:
      type: string
      description: "Proficiency level (dynamic). Allowed values depend on the selected language and are sourced from config.yaml (e.g., CEFR A1–C2, JLPT N5–N1, HSK1–HSK6)."

    QuestionType:
      type: string
      enum:
        - vocabulary
        - fill_blank
        - reading_comprehension
        - qa

    QuestionStatus:
      type: string
      enum:
        - active
        - reported

    QuizChatRequest:
      type: object
      properties:
        user_message:
          type: string
          description: "The user's message to the AI tutor."
          minLength: 1
          maxLength: 2000
        question:
          $ref: "#/components/schemas/Question"
        answer_context:
          $ref: "#/components/schemas/AnswerResponse"
          description: "Context about the user's submitted answer. Omit if the user has not answered yet."
        conversation_history:
          type: array
          maxItems: 50
          items:
            $ref: "#/components/schemas/ChatMessage"
          description: "Previous messages in the conversation"
      required:
        - user_message
        - question

    QuizChatResponse:
      type: object
      properties:
        ai_response:
          type: string
          description: "The response from the AI tutor."

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        email:
          type: string
          nullable: true
        timezone:
          type: string
          nullable: true
        last_active:
          type: string
          format: date-time-time
          nullable: true
        preferred_language:
          type: string
          nullable: true
        current_level:
          type: string
        ai_enabled:
          type: boolean
          nullable: true
          description: Whether AI features are enabled for this user
        is_paused:
          type: boolean
          description: Whether the user is paused (question generation disabled)
        created_at:
          type: string
          format: date-time-time
        updated_at:
          type: string
          format: date-time-time

    UserCreateRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address
        timezone:
          type: string
          maxLength: 100
          description: Timezone (e.g., "UTC", "America/New_York")
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: Password (minimum 8 characters)
        preferred_language:
          type: string
          maxLength: 50
          description: Preferred learning language
        current_level:
          type: string
          maxLength: 10
          description: Current proficiency level
        ai_enabled:
          type: boolean
          default: false
          description: Whether AI features are enabled for this user

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address
        timezone:
          type: string
          maxLength: 100
          description: Timezone (e.g., "UTC", "America/New_York")
        preferred_language:
          type: string
          maxLength: 50
          description: Preferred learning language
        current_level:
          type: string
          maxLength: 10
          description: Current proficiency level
        ai_enabled:
          type: boolean
          description: Whether AI features are enabled for this user
        ai_provider:
          type: string
          pattern: "^[a-zA-Z0-9_.-]*$"
          maxLength: 50
          description: AI provider code
        ai_model:
          type: string
          pattern: "^[a-zA-Z0-9_.:-]*$"
          maxLength: 50
          description: AI model code
        api_key:
          type: string
          maxLength: 1000
          description: API key for AI provider (write-only)
        selectedRoles:
          type: array
          items:
            type: string
          maxItems: 20
          description: Array of role names to assign to the user
      anyOf:
        - required: ["ai_provider", "ai_model"]
        - not:
            required: ["ai_provider"]

    PasswordResetRequest:
      type: object
      required:
        - new_password
      properties:
        new_password:
          type: string
          minLength: 8
          maxLength: 128
          description: New password (minimum 8 characters)

    ServiceVersion:
      type: object
      properties:
        service:
          type: string
          description: Service name (e.g., 'backend', 'worker')
          maxLength: 50
        version:
          type: string
          description: Version string (e.g., git tag or 'dev')
          maxLength: 100
        commit:
          type: string
          description: Git commit hash
          maxLength: 50
        buildTime:
          type: string
          description: Build timestamp (ISO8601)
          maxLength: 100
      required:
        - service
        - version
        - commit
        - buildTime

    AggregatedVersion:
      type: object
      properties:
        backend:
          $ref: "#/components/schemas/ServiceVersion"
          description: Backend service version information
        worker:
          oneOf:
            - $ref: "#/components/schemas/ServiceVersion"
            - type: object
              required:
                - error
              properties:
                error:
                  type: string
                  description: Error message when worker is unavailable
              additionalProperties: false
      required:
        - backend
        - worker

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Role ID
        name:
          type: string
          maxLength: 50
          description: Role name (e.g., "user", "admin")
        description:
          type: string
          maxLength: 500
          description: Role description
        created_at:
          type: string
          format: date-time-time
          description: When the role was created
        updated_at:
          type: string
          format: date-time-time
          description: When the role was last updated
      required:
        - id
        - name
        - description
        - created_at
        - updated_at

    UserLearningPreferences:
      type: object
      properties:
        focus_on_weak_areas:
          type: boolean
          description: Whether to focus on weak areas
        fresh_question_ratio:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Ratio of fresh (never seen) questions to show (0-1)
        known_question_penalty:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Penalty multiplier for questions marked as known (0-1)
        review_interval_days:
          type: integer
          minimum: 1
          maximum: 60
          description: Days between reviews of known questions
        weak_area_boost:
          type: number
          format: float
          minimum: 1
          maximum: 5
          description: Multiplier for weak area questions
        daily_reminder_enabled:
          type: boolean
          description: Whether to receive daily reminder emails
        tts_voice:
          type: string
          description: Preferred TTS voice (e.g., it-IT-IsabellaNeural)
        daily_goal:
          type: integer
          minimum: 1
          description: User-configurable number of daily questions
      required:
        - focus_on_weak_areas
        - fresh_question_ratio
        - known_question_penalty
        - review_interval_days
        - weak_area_boost
        - daily_reminder_enabled

    DashboardUser:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserProfile"
        progress:
          $ref: "#/components/schemas/UserProgress"
        question_stats:
          $ref: "#/components/schemas/UserQuestionStats"

    DashboardResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/DashboardUser"
        question_stats:
          $ref: "#/components/schemas/QuestionStats"
        ai_concurrency_stats:
          $ref: "#/components/schemas/AIConcurrencyStats"
        worker_health:
          $ref: "#/components/schemas/WorkerHealth"
        worker_port:
          type: string
        worker_base_url:
          type: string

    AIConcurrencyStats:
      type: object
      properties:
        active_requests:
          type: integer
        max_concurrent:
          type: integer
        queued_requests:
          type: integer
        total_requests:
          type: integer
        user_active_count:
          type: object
          additionalProperties:
            type: integer
        max_per_user:
          type: integer

    WorkerHealth:
      type: object
      properties:
        global_paused:
          type: boolean
        healthy_count:
          type: integer
        total_count:
          type: integer
        worker_instances:
          type: array
          items:
            type: object
            properties:
              healthy:
                type: boolean
              is_paused:
                type: boolean
              is_running:
                type: boolean
              last_heartbeat:
                type: object
                properties:
                  Time:
                    type: string
                    format: date-time-time
                  Valid:
                    type: boolean
              total_questions_generated:
                type: integer
              total_runs:
                type: integer
              worker_instance:
                type: string

    PriorityAnalytics:
      type: object
      properties:
        distribution:
          type: object
          properties:
            high:
              type: integer
            medium:
              type: integer
            low:
              type: integer
            average:
              type: number
              format: float

    UserPerformanceAnalytics:
      type: object
      properties:
        weakAreas:
          type: array
          items:
            type: object
        learningPreferences:
          type: object

    GenerationIntelligence:
      type: object
      properties:
        gapAnalysis:
          type: array
          items:
            type: object
        generationSuggestions:
          type: array
          items:
            type: object

    SystemHealthAnalytics:
      type: object
      properties:
        performance:
          type: object
        backgroundJobs:
          type: object

    UserQuestionStats:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        total_answered:
          type: integer
          minimum: 0
        answered_by_type:
          type: object
          additionalProperties:
            type: integer
        answered_by_level:
          type: object
          additionalProperties:
            type: integer
        accuracy_by_type:
          type: object
          additionalProperties:
            type: number
            format: float
        accuracy_by_level:
          type: object
          additionalProperties:
            type: number
            format: float
        available_by_type:
          type: object
          additionalProperties:
            type: integer
        available_by_level:
          type: object
          additionalProperties:
            type: integer

    QuestionStats:
      type: object
      properties:
        total_questions:
          type: integer
          minimum: 0
          description: Total number of questions
        total_responses:
          type: integer
          minimum: 0
          description: Total number of responses
        questions_by_type:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of questions by type
        questions_by_level:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of questions by level
        questions_by_language:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of questions by language

    NotificationStats:
      type: object
      properties:
        total_sent:
          type: integer
          minimum: 0
          description: Total number of notifications sent
        total_failed:
          type: integer
          minimum: 0
          description: Total number of notifications that failed
        success_rate:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Success rate as a percentage (0-1)
        sent_today:
          type: integer
          minimum: 0
          description: Number of notifications sent today
        sent_this_week:
          type: integer
          minimum: 0
          description: Number of notifications sent this week
        notifications_by_type:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of notifications by type

    NotificationErrorStats:
      type: object
      properties:
        total_errors:
          type: integer
          minimum: 0
          description: Total number of errors
        unresolved_errors:
          type: integer
          minimum: 0
          description: Number of unresolved errors
        errors_by_type:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of errors by type
        errors_by_notification_type:
          type: object
          additionalProperties:
            type: integer
          description: Breakdown of errors by notification type

    NotificationError:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
          nullable: true
        username:
          type: string
          description: Username of the user (if available)
        notification_type:
          type: string
          enum: ["daily_reminder", "test_email"]
          description: Type of notification that failed
        error_type:
          type: string
          enum:
            [
              "smtp_error",
              "template_error",
              "user_not_found",
              "email_disabled",
              "other",
            ]
          description: Type of error that occurred
        error_message:
          type: string
          description: Detailed error message
        email_address:
          type: string
          nullable: true
          description: Email address that was being used
        occurred_at:
          type: string
          format: date-time-time
          description: When the error occurred
        resolved_at:
          type: string
          format: date-time-time
          nullable: true
          description: When the error was resolved
        resolution_notes:
          type: string
          nullable: true
          description: Notes about how the error was resolved

    UpcomingNotification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        username:
          type: string
          description: Username of the user
        email_address:
          type: string
          description: Email address for the notification
        notification_type:
          type: string
          enum: ["daily_reminder", "test_email"]
          description: Type of notification
        scheduled_for:
          type: string
          format: date-time-time
          description: When the notification is scheduled to be sent
        status:
          type: string
          enum: ["pending", "sent", "cancelled"]
          description: Current status of the notification
        created_at:
          type: string
          format: date-time-time
          description: When the notification was created

    SentNotification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        username:
          type: string
          description: Username of the user
        email_address:
          type: string
          description: Email address the notification was sent to
        notification_type:
          type: string
          enum: ["daily_reminder", "test_email"]
          description: Type of notification
        subject:
          type: string
          description: Subject line of the email
        template_name:
          type: string
          description: Template used for the notification
        sent_at:
          type: string
          format: date-time-time
          description: When the notification was sent
        status:
          type: string
          enum: ["sent", "failed", "bounced"]
          description: Status of the notification
        error_message:
          type: string
          nullable: true
          description: Error message if the notification failed
        retry_count:
          type: integer
          minimum: 0
          description: Number of times the notification was retried

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages
      required:
        - page
        - page_size
        - total
        - total_pages

    WorkerStatus:
      type: object
      properties:
        status:
          type: string
          enum: ["idle", "busy", "error"]
          description: Current status of the worker
        last_heartbeat:
          type: string
          format: date-time-time
          description: Timestamp of the last heartbeat from the worker
        error_message:
          type: string
          nullable: true
          description: Error message if the worker is in an error state

    WorkerStatusResponse:
      type: object
      properties:
        has_errors:
          type: boolean
          description: Whether the worker has encountered errors
        error_message:
          type: string
          description: Error message if worker has errors
        global_paused:
          type: boolean
          description: Whether the worker is globally paused
        user_paused:
          type: boolean
          description: Whether the user's question generation is paused
        healthy_workers:
          type: integer
          description: Number of healthy worker instances
        total_workers:
          type: integer
          description: Total number of worker instances
        last_error_details:
          type: string
          description: Detailed error information if any
        worker_running:
          type: boolean
          description: Whether the worker is currently running
      required:
        - has_errors
        - error_message
        - global_paused
        - user_paused
        - healthy_workers
        - total_workers
        - last_error_details
        - worker_running

    LevelsResponse:
      type: object
      properties:
        levels:
          type: array
          maxItems: 20
          items:
            type: string
          description: Array of available language proficiency levels
        level_descriptions:
          type: object
          additionalProperties:
            type: string
          description: Mapping from level code to short label (e.g. Beginner, Intermediate)
      required:
        - levels
        - level_descriptions

    LanguageInfo:
      type: object
      properties:
        code:
          type: string
          description: ISO language code
          example: "it"
        name:
          type: string
          description: Human-readable language name
          example: "Italian"
        tts_locale:
          type: string
          description: TTS locale code for this language
          example: "it-IT"
        tts_voice:
          type: string
          description: Default TTS voice for this language
          example: "it-IT-IsabellaNeural"
      required:
        - code
        - name

    LanguagesResponse:
      type: array
      maxItems: 20
      items:
        $ref: "#/components/schemas/LanguageInfo"
      description: Array of available learning languages with codes and names

    APIKeyAvailabilityResponse:
      type: object
      properties:
        has_api_key:
          type: boolean
          description: Whether the user has a saved API key for this provider
      required:
        - has_api_key

    GoogleOAuthLoginResponse:
      type: object
      properties:
        auth_url:
          type: string
          description: The Google OAuth authorization URL to redirect the user to
      required:
        - auth_url

    PriorityInsights:
      type: object
      properties:
        total_questions_in_queue:
          type: integer
          minimum: 0
          description: Total number of questions waiting to be processed
        high_priority_questions:
          type: integer
          minimum: 0
          description: Number of high-priority questions
        medium_priority_questions:
          type: integer
          minimum: 0
          description: Number of medium-priority questions
        low_priority_questions:
          type: integer
          minimum: 0
          description: Number of low-priority questions

    GenerationFocus:
      type: object
      properties:
        current_generation_model:
          type: string
          description: The AI model currently being used for generation
        last_generation_time:
          type: string
          format: date-time-time
          description: Timestamp of the last time a question was generated
        generation_rate:
          type: number
          format: float
          minimum: 0
          description: Average number of questions generated per minute

    UserNullable:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          maxLength: 100
          pattern: "^[a-zA-Z0-9_@.+-]+$"
          description: Username (1-100 characters, alphanumeric + underscore + email characters, cannot be empty or whitespace-only)
        email:
          type: string
          nullable: true
        timezone:
          type: string
          nullable: true
        preferred_language:
          type: string
          nullable: true
        current_level:
          type: string
          nullable: true
        ai_provider:
          type: string
          nullable: true
        ai_model:
          type: string
          nullable: true
        ai_enabled:
          type: boolean
          nullable: true
          description: Whether AI features are enabled for this user
        is_paused:
          type: boolean
          description: Whether the user is paused (question generation disabled)
        has_api_key:
          type: boolean
          description: Whether the user has a valid API key saved for their current AI provider
        created_at:
          type: string
          format: date-time-time
        last_active:
          type: string
          format: date-time-time
          nullable: true
        roles:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/Role"
          description: List of roles assigned to the user

    ForceSendNotificationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Notification sent successfully"
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            username:
              type: string
              example: "testuser"
            email:
              type: string
              example: "test@example.com"
        notification:
          type: object
          properties:
            type:
              type: string
              example: "daily_reminder"
            subject:
              type: string
              example: "Time for your daily quiz! 🧠"
            status:
              type: string
              example: "sent"

    TTSRequest:
      type: object
      required:
        - input
      properties:
        input:
          type: string
          minLength: 1
          maxLength: 4000
          description: The text to convert to speech
        voice:
          type: string
          default: "echo"
          description: The voice to use for speech generation
        model:
          type: string
          default: "tts-1"
          description: The TTS model to use
        stream_format:
          type: string
          default: "sse"
          enum: ["sse", "mp3", "wav"]
          description: The format for streaming audio data

    TTSResponse:
      type: object
      properties:
        type:
          type: string
          enum: ["audio", "usage", "error"]
          description: The type of SSE event
        audio:
          type: string
          format: base64
          description: Base64 encoded audio chunk (for type=audio)
        usage:
          type: object
          properties:
            input_tokens:
              type: integer
              description: Number of input tokens processed
            output_tokens:
              type: integer
              description: Number of output tokens generated
            total_tokens:
              type: integer
              description: Total tokens used
          description: Usage statistics (for type=usage)
        error:
          type: string
          description: Error message (for type=error)

    TranslateRequest:
      type: object
      required:
        - text
        - target_language
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 5000
          description: Text to translate
        target_language:
          type: string
          minLength: 2
          maxLength: 10
          description: Target language code (e.g., 'en', 'es', 'fr')
        source_language:
          type: string
          minLength: 2
          maxLength: 10
          description: Source language code (optional - will be auto-detected if not provided)

    TranslateResponse:
      type: object
      required:
        - translated_text
        - source_language
        - target_language
      properties:
        translated_text:
          type: string
          description: The translated text
        source_language:
          type: string
          description: Detected or provided source language code
        target_language:
          type: string
          description: Target language code that was requested
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Translation confidence score (if available from provider)

    DailyQuestionHistory:
      type: object
      properties:
        assignment_date:
          type: string
          format: date-time-time
          description: RFC3339 timestamp of when the question was assigned in the user's timezone (includes offset)
        is_completed:
          type: boolean
          description: Whether the question was completed on this date
        is_correct:
          type: boolean
          nullable: true
          description: Whether the user's answer was correct (null if not attempted)
        submitted_at:
          type: string
          format: date-time-time
          nullable: true
          description: When the user submitted their answer
      required:
        - assignment_date
        - is_completed

    # Story schemas
    StoryStatus:
      type: string
      enum:
        - active
        - archived
        - completed
      example: "active"

    Story:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "The Mystery of the Old Manor"
        language:
          type: string
          example: "en"
        subject:
          type: string
          nullable: true
          example: "A detective solving crimes in Victorian England"
        author_style:
          type: string
          nullable: true
          example: "Agatha Christie"
        time_period:
          type: string
          nullable: true
          example: "1920s"
        genre:
          type: string
          nullable: true
          example: "mystery"
        tone:
          type: string
          nullable: true
          example: "suspenseful"
        character_names:
          type: string
          nullable: true
          example: "Detective Smith, Lady Blackwood, Mr. Jones"
        custom_instructions:
          type: string
          nullable: true
          example: "Focus on psychological tension and plot twists"
        section_length_override:
          type: string
          enum: [short, medium, long]
          example: "medium"
        status:
          type: string
          enum: [active, archived, completed]
          example: "active"
        last_section_generated_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-15T10:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-15T10:00:00Z"
        extra_generations_today:
          type: integer
          minimum: 0
          example: 0

    StorySection:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        story_id:
          type: integer
          format: int64
          example: 1
        section_number:
          type: integer
          example: 1
        content:
          type: string
          example: "In the quiet town of Willow Creek, Detective Sarah Johnson received a mysterious letter..."
        language_level:
          type: string
          example: "intermediate"
        word_count:
          type: integer
          example: 150
        generated_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"
        generation_date:
          type: string
          format: date
          example: "2025-01-15"

    StorySectionQuestion:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        section_id:
          type: integer
          format: int64
          example: 1
        question_text:
          type: string
          example: "What was the detective's first clue?"
        options:
          type: array
          items:
            type: string
          example: ["A mysterious letter", "A phone call", "A visit from a stranger", "A newspaper article"]
        correct_answer_index:
          type: integer
          minimum: 0
          maximum: 3
          example: 0
        explanation:
          type: string
          nullable: true
          example: "The mysterious letter was the first clue mentioned in the story."
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"

    StoryWithSections:
      type: object
      allOf:
        - $ref: "#/components/schemas/Story"
        - type: object
          properties:
            sections:
              type: array
              items:
                $ref: "#/components/schemas/StorySection"

    StorySectionWithQuestions:
      type: object
      allOf:
        - $ref: "#/components/schemas/StorySection"
        - type: object
          properties:
            questions:
              type: array
              items:
                $ref: "#/components/schemas/StorySectionQuestion"

    CreateStoryRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "The Mystery of the Old Manor"
        subject:
          type: string
          maxLength: 500
          nullable: true
          example: "A detective solving crimes in Victorian England"
        author_style:
          type: string
          maxLength: 200
          nullable: true
          example: "Agatha Christie"
        time_period:
          type: string
          maxLength: 200
          nullable: true
          example: "1920s"
        genre:
          type: string
          maxLength: 100
          nullable: true
          example: "mystery"
        tone:
          type: string
          maxLength: 100
          nullable: true
          example: "suspenseful"
        character_names:
          type: string
          maxLength: 1000
          nullable: true
          example: "Detective Smith, Lady Blackwood, Mr. Jones"
        custom_instructions:
          type: string
          maxLength: 2000
          nullable: true
          example: "Focus on psychological tension and plot twists"
        section_length_override:
          type: string
          enum: [short, medium, long]
          example: "medium"

    EmptyRequest:
      type: object
      description: Empty request body for endpoints that don't require request data

    UserIdRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the user

    CreateSnippetRequest:
      type: object
      required:
        - original_text
        - translated_text
        - source_language
        - target_language
      properties:
        original_text:
          type: string
          minLength: 1
          maxLength: 2000
          description: The original text/word to save
          example: "Bonjour"
        translated_text:
          type: string
          minLength: 1
          maxLength: 2000
          description: The translated text
          example: "Hello"
        source_language:
          type: string
          minLength: 2
          maxLength: 10
          description: ISO language code of the source text
          example: "fr"
        target_language:
          type: string
          minLength: 2
          maxLength: 10
          description: ISO language code of the target translation
          example: "en"
        question_id:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: Optional ID of the question where this text was encountered. If provided, the snippet will inherit the question's difficulty level (A1, A2, B1, B2, C1, C2)
        context:
          type: string
          maxLength: 1000
          nullable: true
          description: Optional user-provided context or notes about this snippet

    UpdateSnippetRequest:
      type: object
      properties:
        original_text:
          type: string
          maxLength: 500
          description: The original text/word to save
        translated_text:
          type: string
          maxLength: 500
          description: The translated text
        source_language:
          type: string
          maxLength: 10
          description: ISO language code of the source text
        target_language:
          type: string
          maxLength: 10
          description: ISO language code of the target translation
        context:
          type: string
          maxLength: 1000
          nullable: true
          description: User-provided context or notes about this snippet

    Snippet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        original_text:
          type: string
          example: "Bonjour"
        translated_text:
          type: string
          example: "Hello"
        source_language:
          type: string
          example: "fr"
        target_language:
          type: string
          example: "en"
        question_id:
          type: integer
          format: int64
          nullable: true
          example: 123
        context:
          type: string
          nullable: true
          example: "Learned this during my French conversation practice"
        difficulty_level:
          type: string
          nullable: true
          example: "B1"
          description: "CEFR level (A1, A2, B1, B2, C1, C2)"
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"

    SnippetList:
      type: object
      properties:
        snippets:
          type: array
          items:
            $ref: "#/components/schemas/Snippet"
        total:
          type: integer
          description: Total number of snippets matching the query
          example: 150
        limit:
          type: integer
          description: Number of snippets returned
          example: 50
        offset:
          type: integer
          description: Number of snippets skipped
          example: 0
        query:
          type: string
          nullable: true
          description: The search query that was used (if any)
          example: "bonjour"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: aiquiz_session
    sessionAuth:
      type: apiKey
      in: cookie
      name: aiquiz_session
      description: Session-based authentication using cookies
