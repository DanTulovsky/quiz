# NGINX configuration with OpenTelemetry tracing support
# Requires ngx_otel_module to be available in the NGINX build

user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

# Load OpenTelemetry module (required for nginx:stable-otel)
load_module modules/ngx_otel_module.so;

events {
    worker_connections 768;
}

http {
    sendfile on;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;

    gzip on;

    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=quiz_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=default_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=tts_limit:10m rate=5r/s;

    server {
        listen 80;

        # Hide nginx version information
        server_tokens off;

        # Add Content Security Policy header with secure configuration
        # Nonce will be injected by build script - placeholder: jJv1dXcHOmvbRO2xN0o2uQ==
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'nonce-jJv1dXcHOmvbRO2xN0o2uQ=='; style-src 'self' 'unsafe-inline'; font-src 'self'; img-src 'self' data:; connect-src 'self' http://localhost:8080; media-src 'self' blob: data:; frame-ancestors 'self'; form-action 'self';" always;
        # Add X-Frame-Options header for additional clickjacking protection
        # Note: Removed DENY to allow iframes for admin interface
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Additional security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Cross-Origin headers for Spectre protection
        add_header Cross-Origin-Resource-Policy "same-origin" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;

        # Define valid SPA routes
        location ~ ^/(login|signup|quiz|vocabulary|reading-comprehension|progress|settings|oauth-callback|admin|daily)(/.*)?$ {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # Mobile SPA routes
        location ~ ^/m(/.*)?$ {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # Admin routes - serve from frontend
        location ~ ^/admin/ {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # Serve frontend static assets
        location ~ ^/assets/.*\.(js|css|map)$ {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files $uri =404;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve static assets for frontend (vite icon and favicon)
        location ~ ^/(vite\.svg|favicon\.svg) {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files $uri =404;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve build-time version file (avoid caching)
        location = /meta/version.json {
            root /usr/share/nginx/html;
            try_files $uri =404;
            add_header Content-Type "application/json" always;
            add_header Cache-Control "no-cache, must-revalidate, max-age=0" always;
        }

        # Serve font files
        location ~ ^/fonts/ {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files $uri =404;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Access-Control-Allow-Origin "*";
        }

        # Legacy favicon requests: try .ico, fallback to .svg (single place)
        location = /favicon.ico {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files /favicon.ico /favicon.svg =404;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Authentication endpoints - stricter rate limiting
        location ~ ^/v1/auth/(login|signup)$ {
            include /etc/nginx/snippets/ratelimit-auth.inc;
            proxy_pass http://backend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Quiz endpoints - moderate rate limiting
        location ~ ^/v1/quiz/ {
            include /etc/nginx/snippets/ratelimit-quiz.inc;
            proxy_pass http://backend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Backend admin endpoints - proxy to backend service
        location ~ ^/v1/admin/backend/ {
            include /etc/nginx/snippets/ratelimit-api.inc;
            proxy_pass http://backend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }

        # Worker admin endpoints - proxy to worker service
        location ~ ^/v1/admin/worker/ {
            include /etc/nginx/snippets/ratelimit-api.inc;
            proxy_pass http://worker:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }

        # TTS endpoints with authentication validation
        location /v1/audio/ {
            auth_request /auth/check;
            include /etc/nginx/snippets/ratelimit-tts.inc;
            proxy_pass http://tts:5050;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
            # TTS service is setup to not require API key

            # SSE streaming support
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;

            # CORS headers for TTS
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Content-Type "text/plain charset=UTF-8";
                add_header Content-Length 0;
                return 204;
            }
        }

        # TTS voice listing endpoints
        location ~ ^/v1/voices(.*)$ {
            auth_request /auth/check;
            include /etc/nginx/snippets/ratelimit-tts.inc;
            proxy_pass http://tts:5050;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;

            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;

            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;

            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Content-Type "text/plain charset=UTF-8";
                add_header Content-Length 0;
                return 204;
            }
        }

        # Authentication validation endpoint for TTS
        location = /auth/check {
            internal;
            proxy_pass http://backend:8080/v1/auth/check;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }

        # All other API endpoints - general rate limiting
        location /v1/ {
            include /etc/nginx/snippets/ratelimit-api.inc;
            proxy_pass http://backend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }

        # Root path
        location = / {
            include /etc/nginx/snippets/ratelimit-default.inc;
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # Health check passthrough
        location /health {
            proxy_pass http://backend:8080;
            include /etc/nginx/snippets/ratelimit-default.inc;
        }
    }

    # OpenTelemetry tracing configuration
    otel_exporter {
        endpoint otel-collector:4317;
    }
    otel_trace on;
    otel_service_name nginx-quiz;
    otel_trace_context propagate;
}
